<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zookeeper on IWiki</title>
    <link>https://jiandar.github.io/docs/dev-tool/micro-service/zookeeper/</link>
    <description>Recent content in Zookeeper on IWiki</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://jiandar.github.io/docs/dev-tool/micro-service/zookeeper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>工作原理</title>
      <link>https://jiandar.github.io/docs/dev-tool/micro-service/zookeeper/work-principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-tool/micro-service/zookeeper/work-principle/</guid>
      <description>工作原理#工作机制# 基于观察者模式设计，接受观察者的注册 负责存储和管理大家都关心的数据 当这些数据发现变化时，将会通知到已注册的观察者。  监听原理# 在 main() 主线程中创建 zkClient 客户端。 zkClient 会创建两个线程，一个负责网络连接通信（connet），一个负责监听（listener）。 zkClient 通过 connet 线程，将监听事件注册到 Zookeeper 的监听列表。 当数据或路径发生改变时，Zookeeper 会将消息发送给 listener 线程。 listener 线程调用 process() 方法，执行相应的操作。  </description>
    </item>
    
    <item>
      <title>选举机制</title>
      <link>https://jiandar.github.io/docs/dev-tool/micro-service/zookeeper/elect-leader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-tool/micro-service/zookeeper/elect-leader/</guid>
      <description>选举机制#选举# 在 Zookeeper工作时，有一个节点为 Leader，其他则为 Follower，而 Leader 是通过内部的选举机制临时产生的 节点状态：领导者（LEADING）、竞选者（LOOKING）、跟随者（FOLLOWING）、观察者（OBSERVER） 触发选举时机：集群首次启动、集群在工作时Leader宕机 投票信息：myid（服务器id）、ZXID （事务id）、逻辑时钟、节点状态  选举原则#  Zookeeper 集群中只有超过半数以上的服务器启动，集群才能正常工作；
  在集群正常工作之前，myid 小的服务器给 myid 大的服务器投票，直到集群正常工作，选出 Leader；
  选出Leader之后，之前的服务器状态由 Looking 改变为 Following，以后的服务器都是 Follower。
  选举过程# 假设：有五台服务器，从 id1-5 依序启动 服务器1启动，发起一次选举：  服务器1投自己一票。 此时服务器1为1票，不够半数以上（3票），选举无法完成； 服务器1状态保持为LOOKING；     服务器2启动，再发起一次选举：  服务器1和2分别投自己一票，此时服务器1发现服务器2的id比自己大，更改选票投给服务器2； 此时服务器1为0票，服务器2为2票，不够半数以上（3票），选举无法完成； 服务器1、2状态保持LOOKING；     服务器3启动，发起一次选举：  与上面过程一样，服务器1和2先投自己一票，然后因为服务器3id最大，两者更改选票投给为服务器3； 此时服务器1为0票，服务器2为0票，服务器3为3票。服务器3的票数已经超过半数当选Leader。 服务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING；     服务器4启动，发起一次选举：  此时服务器1、2、3已经不是LOOKING状态，不会更改选票信息。投票结果：服务器3为3票，服务器4为1票。 此时服务器4服从多数，更改选票信息为服务器3； 服务器4并更改状态为FOLLOWING；     服务器5启动，发起一次选举：  同4一样投票给3，此时服务器3一共5票，服务器5为0票； 服务器5并更改状态为FOLLOWING； 最终Leader是服务器3，状态为LEADING；其余服务器是Follower，状态为FOLLOWING。    </description>
    </item>
    
  </channel>
</rss>
