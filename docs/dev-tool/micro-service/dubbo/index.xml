<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dubbo on IWiki</title>
    <link>https://jiandar.github.io/docs/dev-tool/micro-service/dubbo/</link>
    <description>Recent content in Dubbo on IWiki</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://jiandar.github.io/docs/dev-tool/micro-service/dubbo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RPC</title>
      <link>https://jiandar.github.io/docs/dev-tool/micro-service/dubbo/rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-tool/micro-service/dubbo/rpc/</guid>
      <description>RPC#RPC# Remote Procedure Call，远程过程调用，是一种进程间通信方式 允许程序调用另一个地址空间的过程或函数，而不用程序员显式编码这个远程调用的细节。 优点：调用简单、性能高、低延迟、自带负载均衡 缺点：耦合性强、无法跨语言，平台敏感  REST# REST，即 RESTful ，是一种架构风格，指的是一组架构约束条件和原则。 优点：耦合性低，兼容性好，通用性好，跨语言支持 缺点：性能不如 RPC 高  RPC &amp;amp; REST# RPC ：服务提供方与调用方接口依赖方式太强、服务对平台敏感，难以简单复用。 REST ：牺牲了服务调用的性能，但避免了RPC带来的问题。  RPC or REST# RPC 适用于内网服务调用，对外提供服务请走 REST。 IO 密集的服务调用用 RPC，低频服务用 REST 服务调用过于密集与复杂，RPC 就比较适用  </description>
    </item>
    
    <item>
      <title>工作原理</title>
      <link>https://jiandar.github.io/docs/dev-tool/micro-service/dubbo/work-principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-tool/micro-service/dubbo/work-principle/</guid>
      <description>工作原理#核心功能# 面向接口的远程方法调用 智能容错和负载均衡 服务自动注册和发现  Dubbo 角色# 服务提供者：Provider 服务消费者：Consumer 注册中心：Registry 监控中心：Monitor  Dubbo 工作原理# 服务容器负责启动，加载，运行服务提供者。 服务提供者在启动时，向注册中心注册自己提供的服务。 服务消费者在启动时，向注册中心订阅自己所需的服务。 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台进行调用，如果调用失败，再选另一台调用。 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。  </description>
    </item>
    
  </channel>
</rss>
