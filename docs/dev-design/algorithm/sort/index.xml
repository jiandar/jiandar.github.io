<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>排序算法 on IWiki</title>
    <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/</link>
    <description>Recent content in 排序算法 on IWiki</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://jiandar.github.io/docs/dev-design/algorithm/sort/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>冒泡排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/bubble/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/bubble/</guid>
      <description>冒泡排序#算法步骤# 相邻元素两两比较，大的往后放。第一轮完毕后，最后的元素会是最大的数 去除最后的元素，重复以上的步骤。 直到所有元素均排序完毕  动图演示#代码实现#public class BubbleSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { for (int i = 1; i &amp;lt; arr.length; i++) { // 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。  boolean flag = true; for (int j = 0; j &amp;lt; arr.length - i; j++) { if (arr[j] &amp;gt; arr[j + 1]) { int tmp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = tmp; flag = false; } } if (flag) { break; } } return arr; } } </description>
    </item>
    
    <item>
      <title>选择排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/selection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/selection/</guid>
      <description>选择排序#算法步骤# 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。 重复第二步，直到所有元素均排序完毕。  动图演示#代码实现#public class SelectionSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { // 总共要经过 N-1 轮比较  for (int i = 0; i &amp;lt; arr.length - 1; i++) { int min = i; // 每轮需要比较的次数 N-i  for (int j = i + 1; j &amp;lt; arr.length; j++) { if (arr[j] &amp;lt; arr[min]) { // 记录目前能找到的最小值元素的下标  min = j; } } // 将找到的最小值和i位置所在的值进行交换  if (i !</description>
    </item>
    
    <item>
      <title>插入排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/insertion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/insertion/</guid>
      <description>插入排序#算法步骤# 将第一个元素看做一个有序序列，把其余元素当成是未排序序列。 从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。 类似扑克牌  动图演示#代码实现#public class InsertSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { // 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的  for (int i = 1; i &amp;lt; arr.length; i++) { // 记录要插入的数据  int tmp = arr[i]; // 从已经排序的序列最右边的开始比较，找到比其小的数  int j = i; while (j &amp;gt; 0 &amp;amp;&amp;amp; tmp &amp;lt; arr[j - 1]) { arr[j] = arr[j - 1]; j--; } // 存在比其小的数，插入  if (j !</description>
    </item>
    
    <item>
      <title>归并排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/merge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/merge/</guid>
      <description>归并排序#归并操作# 将已有序的子序列合并，得到完全有序的序列  算法步骤# 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列； 设定两个指针，最初位置分别为两个已经排序序列的起始位置； 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置； 重复步骤 3 直到某一指针达到序列尾； 将另一序列剩下的所有元素直接复制到合并序列尾。  动图演示#代码实现#public class MergeSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { if (arr.length &amp;lt; 2) { return arr; } int middle = (int) Math.floor(arr.length / 2); int[] left = Arrays.copyOfRange(arr, 0, middle); int[] right = Arrays.copyOfRange(arr, middle, arr.length); return merge(sort(left), sort(right)); } protected int[] merge(int[] left, int[] right) { int[] result = new int[left.</description>
    </item>
    
    <item>
      <title>快速排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/quick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/quick/</guid>
      <description>快速排序#算法步骤# 先从数列中取出一个数作为基准数。 分区过程：将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。 再对左右区间重复第二步，直到各区间只有一个数。  动图演示#代码实现#public class QuickSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { return quickSort(arr, 0, arr.length - 1); } private int[] quickSort(int[] arr, int left, int right) { if (left &amp;lt; right) { int partitionIndex = partition(arr, left, right); quickSort(arr, left, partitionIndex - 1); quickSort(arr, partitionIndex + 1, right); } return arr; } private int partition(int[] arr, int left, int right) { // 设定基准值（pivot）  int pivot = left; int index = pivot + 1; for (int i = index; i &amp;lt;= right; i++) { if (arr[i] &amp;lt; arr[pivot]) { swap(arr, i, index); index++; } } swap(arr, pivot, index - 1); return index - 1; } private void swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } </description>
    </item>
    
    <item>
      <title>希尔排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/shell/</guid>
      <description>希尔排序#希尔排序# 是插入排序的改进版本。 先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序 待整个序列中的记录&amp;quot;基本有序&amp;quot;时，再对全体记录进行依次直接插入排序。  算法步骤# 选择一个增量序列 t1，t2，……，tk，其中 ti &amp;gt; tj, tk = 1； 按增量序列个数 k，对序列进行 k 趟排序； 每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。 仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。  动图演示#代码实现#public class ShellSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { int length = arr.length; int temp; for (int step = length / 2; step &amp;gt;= 1; step /= 2) { for (int i = step; i &amp;lt; length; i++) { temp = arr[i]; int j = i - step; while (j &amp;gt;= 0 &amp;amp;&amp;amp; arr[j] &amp;gt; temp) { arr[j + step] = arr[j]; j -= step; } arr[j + step] = temp; } } } } </description>
    </item>
    
    <item>
      <title>计数排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/counting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/counting/</guid>
      <description>计数排序#计数排序# 要求输入的数据必须是有确定范围的整数 计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。  算法步骤# 找出待排序的数组中最大和最小的元素 统计数组中每个值为i的元素出现的次数，存入数组C的第i项 对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加） 反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1  动图演示#代码实现#public class CountingSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { int maxValue = getMaxValue(arr); return countingSort(arr, maxValue); } private int[] countingSort(int[] arr, int maxValue) { int bucketLen = maxValue + 1; int[] bucket = new int[bucketLen]; for (int value : arr) { bucket[value]++; } int sortedIndex = 0; for (int j = 0; j &amp;lt; bucketLen; j++) { while (bucket[j] &amp;gt; 0) { arr[sortedIndex++] = j; bucket[j]--; } } return arr; } private int getMaxValue(int[] arr) { int maxValue = arr[0]; for (int value : arr) { if (maxValue &amp;lt; value) { maxValue = value; } } return maxValue; } } </description>
    </item>
    
    <item>
      <title>基数排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/radix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/radix/</guid>
      <description>基数排序#基数排序# 是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。  基数排序 vs 计数排序 vs 桶排序#  都利用了桶的概念
  基数排序：根据键值的每位数字来分配桶；
  计数排序：每个桶只存储单一键值；
  桶排序：每个桶存储一定范围的数值；
​
  算法步骤# 将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。 然后，从最低位开始，依次进行一次排序。 这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列。  动图演示#代码实现#/** * 考虑负数的情况还可以参考： https://code.i-harness.com/zh-CN/q/e98fa9 */ public class RadixSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { int maxDigit = getMaxDigit(arr); return radixSort(arr, maxDigit); } // 获取最高位数  private int getMaxDigit(int[] arr) { int maxValue = getMaxValue(arr); return getNumLenght(maxValue); } private int getMaxValue(int[] arr) { int maxValue = arr[0]; for (int value : arr) { if (maxValue &amp;lt; value) { maxValue = value; } } return maxValue; } protected int getNumLenght(long num) { if (num == 0) { return 1; } int lenght = 0; for (long temp = num; temp !</description>
    </item>
    
    <item>
      <title>桶排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/bucket/</guid>
      <description>桶排序#桶排序# 是计数排序的升级版。它利用了函数的映射关系  影响效率的因素# 桶的数量 映射函数将输入的 N 个数据分配到 K 个桶中的均匀程度 桶内的排序算法  示意图#代码实现#public class BucketSort implements IArraySort { private static final InsertSort insertSort = new InsertSort(); @Override public int[] sort(int[] arr) throws Exception { return bucketSort(arr, 5); } private int[] bucketSort(int[] arr, int bucketSize) throws Exception { if (arr.length == 0) { return arr; } int minValue = arr[0]; int maxValue = arr[0]; for (int value : arr) { if (value &amp;lt; minValue) { minValue = value; } else if (value &amp;gt; maxValue) { maxValue = value; } } int bucketCount = (int) Math.</description>
    </item>
    
    <item>
      <title>堆排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/heap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/heap/</guid>
      <description>堆排序#堆排序# 堆是一个二叉树，其子结点的键值或索引总是小于（或者大于）它的父节点 堆排序就是利用堆这种特性进行排序  算法步骤# 创建一个堆 H[0……n-1]； 把堆首（最大值）和堆尾互换； 把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置； 重复步骤 2，直到堆的尺寸为 1。  动图演示#代码实现#public class HeapSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { int len = arr.length; buildMaxHeap(arr, len); for (int i = len - 1; i &amp;gt; 0; i--) { swap(arr, 0, i); len--; heapify(arr, 0, len); } return arr; } private void buildMaxHeap(int[] arr, int len) { for (int i = (int) Math.</description>
    </item>
    
  </channel>
</rss>
