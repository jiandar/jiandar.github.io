<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on IWiki</title>
    <link>https://jiandar.github.io/</link>
    <description>Recent content in Home on IWiki</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://jiandar.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CountDownLatch</title>
      <link>https://jiandar.github.io/docs/java/concurrency/tool/CountDownLatch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/tool/CountDownLatch/</guid>
      <description>CountDownLatch#功能# 倒计时器 一个或多个线程一直等待，直到其他线程完成某件事情之后再执行  原理# 通过一个计数器进行实现。计数器初始值为线程的数量。 每当一个线程执行完毕后，计数器的值就减 1。 当计数器的值为 0 时，表示所有线程都执行完毕，然后在 CountDownLatch 上等待的线程就可以恢复执行了。  方法#// 构造方法：设定计数器初始值 public CountDownLatch(int count) // 计数器值减1 public void countDown() // 获取当前计数器值 public long getCount() // 非定时等待 public void await() // 定时等待 public boolean await(long timeout, TimeUnit unit) 示例#// 自习室锁门 public class Test { public static void main(String[] args) throws Exception { CountDownLatch countDownLatch = new CountDownLatch(6); for (int i = 1; i &amp;lt;= 6; i++) { new Thread(() -&amp;gt; { System.</description>
    </item>
    
    <item>
      <title>CSS 基础</title>
      <link>https://jiandar.github.io/docs/dev-lang/css/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/css/basic/</guid>
      <description>CSS 基础#CSS# Cascading Style Sheets，层叠样式表 使网页内容与表现相分离，简化网页代码，提高页面浏览速度  层叠样式# HTML 同一元素，可以定义多个样式 HTML 子元素，会继承其父元素的CSS样式 样式不冲突时，多个样式效果可叠加；样式冲突时，按样式的优先级来显示  语法规则# CSS规则，由选择器、声明组成 注释：/*注释语句*/  引入方式# 外部样式表 内部样式表 内联样式  //外部样式表：在网页头部引入 &amp;lt;head&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;XXX.css&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; //内部样式表：在网页头部，定义样式表 &amp;lt;head&amp;gt; &amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt; p {color:red;} ... &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; //内联颜色表：在相关标签内，定义style属性 &amp;lt;p style=&amp;#34;color:red;&amp;#34;&amp;gt;这是一个段落。&amp;lt;/p&amp;gt; 基础单位#尺寸：size#   值 说明 备注     % 百分比    in 英寸 25.</description>
    </item>
    
    <item>
      <title>IO 流</title>
      <link>https://jiandar.github.io/docs/java/io-nio/io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/io-nio/io/</guid>
      <description>IO 流#概述# I/O 即输入Input/ 输出Output的缩写，就是计算机调度把各个存储中的数据写入写出的过程； Java中用“流（stream）”来抽象表示这么一个写入写出的功能，并封装成一个“类”  I/O 体系#  I/O 体系基类：以程序自身为参照基准，判断输入输出
    字节流 字符流     输入流 InputStream Reader   输出流 OutputStream Writer    ​
  I/O 体系分类
    InputStream OutputStream  Reader Writer     文件流 File&amp;ndash; File&amp;ndash;  File&amp;ndash; File&amp;ndash;   管道流 Piped&amp;ndash; Piped&amp;ndash;  Piped&amp;ndash; Piped&amp;ndash;   缓冲流 Buffered&amp;ndash; Buffered&amp;ndash;  Buffered&amp;ndash; Buffered&amp;ndash;   数据流 Data&amp;ndash; Data&amp;ndash; 字符流 String&amp;ndash; String&amp;ndash;   对象流 Object&amp;ndash; Object&amp;ndash; 转换流 InputStream&amp;ndash; OutputStream&amp;ndash;   字节数组流 ByteArray&amp;ndash; ByteArray&amp;ndash; 字符数组流 CharArray&amp;ndash; CharArray&amp;ndash;   打印流  Print&amp;ndash;  Print&amp;ndash;       I/O 示例#文件流#// FileInputStream、FileOutputStream try (FileInputStream fis = new FileInputStream(&amp;#34;E:\\test1.</description>
    </item>
    
    <item>
      <title>Java 内存模型</title>
      <link>https://jiandar.github.io/docs/java/concurrency/theory/JMM/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/theory/JMM/</guid>
      <description>Java 内存模型#JMM# Java Memory Model，是一种抽象的概念。 描述的是一组规则或规范，规定了程序中各个变量的访问方式。  内存# 主内存：共享的内存区域，所有线程都可访问。代表：内存条 工作内存：每个线程的私有数据区域。代表：CPU缓存  规则# 线程解锁前，必须把共享变量的值刷新回主内存 线程加锁前，必须读取主内存的最新值到自己的工作内存 加锁解锁是同一把锁  访问过程# 线程对变量的操作(读取赋值等)，必须在工作内存中进行 首先要将变量从主内存拷贝到自己的工作空间，然后对变量进行操作，操作完成再将变量写回主内存  并发三特性#   原子性 不可分割，是一个整体。即一个操作或者多个操作，要么全部执行并且不被打断，要么就都不执行     可见性 当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值   有序性 程序执行的顺序按照代码的先后顺序执行    指令重排# 为了优化程序性能，编译器和处理器重新对指令序列进行排序的一种手段  内存屏障# Memory Barrier 作用：  阻止屏障两侧的指令重排序 强制将缓存数据刷新到主内存   类型：  Load指令：读屏障，将内存存储的数据拷贝到处理器的缓存中。 Store指令：写屏障，让当前线程写入高速缓存中的最新数据更新写入到内存，让其他线程也可见。 分为四类：LoadLoad、StoreStore、LoadStore、 StoreLoad    数据依赖性# 如果两个操作访问同一个变量，且这两个操作中有一个为写操作，此时这两个操作之间就存在数据依赖性  语义：as-if-serial# 不管怎么指令重排，单线程程序的执行结果不会改变 为了遵循此语义，编译器不会对存在数据依赖关系的操作做重排序，因为会改变执行结果。 编译器、runtime和处理器都遵守as-if-serial语义  规则：happens-before# 如果A Happens-Before B，则A操作的结果对B操作可见，且A操作在B操作之前执行 JMM承诺保证happens-before规则  as-if-serial &amp;amp; happens-before# 两者目的，都是为了在不改变程序执行结果的前提下，尽可能地提高程序执行的并行度     as-if-serial 保证结果：单线程程序的执行结果不被改变     as-if-serial 创造环境：单线程程序是按程序的顺序来执行的   happens-before 保证结果：正确同步的多线程程序的执行结果不被改变   happens-before 创造环境：正确同步的多线程程序是按happens-before指定的顺序来执行的    </description>
    </item>
    
    <item>
      <title>JDBC</title>
      <link>https://jiandar.github.io/docs/java/basic-class/jdbc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-class/jdbc/</guid>
      <description>JDBC#概述# Java Data Base Connectivity，java 数据库连接 是一种用于执行 sql 语句的 java API，可以为多种关系数据库提供统一访问。  相关API#   java.sql.Driver 数据库驱动，由数据库厂商提供具体实现     java.sql.DriverManager 数据库驱动管理器   java.sql.Connection 数据库连接   java.sql.Statement SQL语句对象   java.sql.ResultSet 数据库结果集    连接步骤#  加载驱动
Class.forName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;);   建立连接
String user = &amp;#34;xxx&amp;#34;; String password = &amp;#34;xxx&amp;#34;; String url = &amp;#34;jdbc:mysql://127.0.0.1:3306/xxx?useUnicode=true&amp;#34;; Connection conn = DriverManager.</description>
    </item>
    
    <item>
      <title>JVM 参数</title>
      <link>https://jiandar.github.io/docs/java/jvm/tuning/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/jvm/tuning/parameter/</guid>
      <description>JVM 参数#JVM 参数#标配参数、X参数（了解）#   -version 版本信息     -help 帮助   -showversion 版本详情       -Xint 解释模式，强制 JVM 执行所有的字节码   -Xcomp 编译模式，第一次使用就把所有的字节码编译成本地代码   -Xmixed 混合模式，将解释模式和编译模式进行混合使用    XX 参数（重点）# 布尔类型：-XX:+或-某个属性（+ 表示开启，- 表示关闭） 键值类型：-XX:属性键=属性值     示例 说明     -XX:-PrintGCDetails 关闭：打印GC收集细节   -XX:+PrintGCDetails 开启：打印GC收集细节   -XX:-UseSerialGC 关闭：使用串行垃圾回收器   -XX:+UseSerialGC 开启：使用串行垃圾回收器       -XX:MetaspaceSize=128m 设置元空间的内存大小，默认21m   -XX:MaxTenuringThreshold=15 设置GC垃圾年龄阈值，默认15    常用 JVM 参数#-Xms、-Xmx、-Xss、-Xmn#   参数 说明 备注     -Xms 初始分配内存，默认是物理内存的1/64 -Xms 等价于 -XX:InitialHeapSize   -Xmx 最大分配内存，默认是物理内存的1/4 -Xmx 等价于 -XX:MaxHeapSize   -Xss 设置单个线程栈的内存大小，一般默认512K ~ 1024K -Xss 等价于 -XX:ThreadStackSize   -Xmn 设置年轻代的内存大小，一般使用默认值     -XX:MetaspaceSize# 设置元空间的内存大小，默认21m 元空间（Java8）和老年代（Java7）类似，但元空间并不在虚拟机中，而是使用本地内存  -XX:SurvivorRatio#  配置新生代中 eden 和 S0/S1 空间比例</description>
    </item>
    
    <item>
      <title>Lambda</title>
      <link>https://jiandar.github.io/docs/java/basic-feature/Java8/lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-feature/Java8/lambda/</guid>
      <description>Lambda 表达式#Lambda# 允许把函数作为一个方法的参数，即函数作为参数传递到方法中 也可称为闭包，能使代码更加简洁  基本语法# 参数列表：() 操作符：-&amp;gt; 方法体：{}  (参数1,参数2,...) -&amp;gt; { // 方法体 }; 简写规则#   特征 说明     可选类型声明 不需要声明参数类型，编译器可以统一识别参数值。   可选的参数圆括号 一个参数无需定义圆括号，但多个参数需要定义圆括号。   可选的大括号 如果主体包含了一个语句，就不需要使用大括号。   可选的返回关键字 如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。    变量作用域# Lambda 表达式只能引用标记了 final 的外层局部变量，否则会编译错误。 Lambda 表达式的局部变量隐性的具有 final 的语义。  public class Test { public static void main(String[] args) { // 隐性 final  int num = 1; Converter s = (param) -&amp;gt; System.</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>https://jiandar.github.io/docs/dev-lang/markdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/markdown/</guid>
      <description>Markdown#概述# 是一种可以使用普通文本编辑器编写的 标记语言 通过简单的标记语法，它可以使普通文本内容具有一定的格式  标题# 语法 # h1 ## h2 ### h3 #### h4 ##### h5 ###### h6   文字#  语法
*斜体* **粗体** ***斜体粗体*** ~~删除线~~   效果
斜体 粗体 斜体粗体 删除线
  图片#  语法
![百度](https://www.baidu.com/img/baidu_jgylogo3.gif &amp;#34;百度一下&amp;#34;)   效果
  链接#  语法
//超链接 [百度](http://baidu.</description>
    </item>
    
    <item>
      <title>Queue</title>
      <link>https://jiandar.github.io/docs/java/container/Queue/Queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/container/Queue/Queue/</guid>
      <description>Queue#队列# 队列是一种数据结构，它支持FIFO，即先进先出  队列类型# 有界队列：有固定大小的队列 无界队列：没有设置固定大小的队列 阻塞队列：  当队列为空时，从队列中获取元素的操作，会被阻塞 当队列为满时，往队列里添加元素的操作，会被阻塞       队列 描述     ConcurrentLinkedQueue 基于链表的并发队列   PriorityQueue 优先级队列   ArrayDeque 数组双端队列   LinkedList 链表双端队列       DelayQueue 延期阻塞队列   SynchronousQueue 并发同步阻塞队列   ArrayBlockingQueue 基于数组的阻塞队列   LinkedBlockingQueue 基于链表的阻塞队列   PriorityBlockingQueue 带优先级的阻塞队列   LinkedBlockingDeque 基于链表的双端阻塞队列    </description>
    </item>
    
    <item>
      <title>ThreadLocal</title>
      <link>https://jiandar.github.io/docs/java/concurrency/container/ThreadLocal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/container/ThreadLocal/</guid>
      <description>ThreadLocal#概述# 线程本地变量 变量在每个线程中都有独立拷贝，线程对变量的访问都是基于它自己的变量，就避免了线程不安全问题  原理# 每个 Thread 对象都有一个 ThreadLocalMap 映射表 ThreadLocalMap 的 key 是 ThreadLocal 实例本身，value 则存储 Object 数据 通过 ThreadLocal 对象的 get()/set() 方法进行取值/设值  方法#// 构造方法 public ThreadLocal() // 设值 public void set(T value) // 取值 public T get() 示例#public class Test { private static ThreadLocal&amp;lt;String&amp;gt; local = new ThreadLocal&amp;lt;&amp;gt;(); public static void main(String[] args) { String[] values = {&amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;4&amp;#34;, &amp;#34;5&amp;#34;}; for (String value : values) { new Thread(() -&amp;gt; { String thread = Thread.</description>
    </item>
    
    <item>
      <title>TreeMap</title>
      <link>https://jiandar.github.io/docs/java/container/Map/TreeMap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/container/Map/TreeMap/</guid>
      <description>TreeMap#概述# TreeMap 是有序集合，通过红黑树实现  特点#   键 不允许为null，不允许重复     值 允许为null，允许重复   顺序 有序   多线程 线程不安全    继承关系#public class TreeMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; implements NavigableMap&amp;lt;K,V&amp;gt;, Cloneable, java.io.Serializable    AbstractMap接口 提供了Map骨干功能     NavigableMap接口 SortedMap 的扩展接口，提供了一系列的导航方法   Cloneable接口 支持克隆   Serializable接口 支持序列化    成员变量#// 比较器 private final Comparator&amp;lt;?</description>
    </item>
    
    <item>
      <title>TreeSet</title>
      <link>https://jiandar.github.io/docs/java/container/Set/TreeSet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/container/Set/TreeSet/</guid>
      <description>TreeSet#概述# TreeSet 基于 TreeMap 实现，是 TreeMap 的缩水版本  特点#   顺序 有序     元素 不允许为null，不允许重复   多线程 线程不安全    继承关系#public class TreeSet&amp;lt;E&amp;gt; extends AbstractSet&amp;lt;E&amp;gt; implements NavigableSet&amp;lt;E&amp;gt;, Cloneable, java.io.Serializable    AbstractSet接口 提供了 Set 接口的骨干功能     NavigableSet接口 SortedSet 的扩展接口，提供了一系列的导航方法   Cloneable接口 支持克隆   Serializable接口 支持序列化    成员变量#// 使用Map的key保存元素 private transient NavigableMap&amp;lt;E,Object&amp;gt; m; // 使用PRESENT作为Map所有key的value private static final Object PRESENT = new Object(); 构造方法#// 默认 public TreeSet() { this(new TreeMap&amp;lt;E,Object&amp;gt;()); } // 指定比较器 public TreeSet(Comparator&amp;lt;?</description>
    </item>
    
    <item>
      <title>Vector</title>
      <link>https://jiandar.github.io/docs/java/container/List/Vector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/container/List/Vector/</guid>
      <description>Vector#概述# 是一个动态数组，其容量能够动态增长 和 ArrayList 很相似，不同的是，Vector 是线程安全的，且包含了许多非集合框架方法 不推荐使用  特点#   顺序 有序     元素 允许为 null，允许重复   效率 比 ArrayList 效率低   多线程 线程安全    继承关系#public class Vector&amp;lt;E&amp;gt; extends AbstractList&amp;lt;E&amp;gt; implements List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable    AbstractList、List接口 提供了列表的骨干功能     RandomAccess接口 提供了随机访问功能   Cloneable接口 支持克隆   Serializable接口 支持序列化    成员变量#// 保存元素的数组 protected Object[] elementData; // 元素的个数 protected int elementCount; // 扩容因子 protected int capacityIncrement; 构造方法#// 默认 public Vector() { this(10); } // 指定初始容量 public Vector(int initialCapacity) { this(initialCapacity, 0); } // 指定初始容量、扩容因子 public Vector(int initialCapacity, int capacityIncrement) { //.</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/search/binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/search/binary/</guid>
      <description>二分查找#条件# 要求待查找的序列有序  算法步骤# 每次取中间位置的值与待查值比较， 如果中间位置的值比待查值大，则在前半部分循环这个查找的过程， 如果中间位置的值比待查值小，则在后半部分循环这个查找的过程。 直到查找到了为止，否则序列中没有待查的关键字。  代码实现#public static int binarySearch(int[] array, int key) { int low = 0; int hight = array.length - 1; int mid; while (low &amp;lt;= hight) { // 中间位置  mid = (low + hight) / 2; if (array[mid] == key) { return mid + 1; } // 向右查找  else if (array[mid] &amp;lt; key) { low = mid + 1; } // 向左查找  else { hight = mid - 1; } } return -1; } </description>
    </item>
    
    <item>
      <title>冒泡排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/bubble/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/bubble/</guid>
      <description>冒泡排序#算法步骤# 相邻元素两两比较，大的往后放。第一轮完毕后，最后的元素会是最大的数 去除最后的元素，重复以上的步骤。 直到所有元素均排序完毕  动图演示#代码实现#public class BubbleSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { for (int i = 1; i &amp;lt; arr.length; i++) { // 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。  boolean flag = true; for (int j = 0; j &amp;lt; arr.length - i; j++) { if (arr[j] &amp;gt; arr[j + 1]) { int tmp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = tmp; flag = false; } } if (flag) { break; } } return arr; } } </description>
    </item>
    
    <item>
      <title>准备工作</title>
      <link>https://jiandar.github.io/docs/private/employment/interview/before-interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/private/employment/interview/before-interview/</guid>
      <description>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
before-interview.md</description>
    </item>
    
    <item>
      <title>创建线程</title>
      <link>https://jiandar.github.io/docs/java/concurrency/thread/thread-create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/thread/thread-create/</guid>
      <description>创建线程#继承Thread类#public class MyThread extends Thread { @Override public void run() { // 执行体...  } } public class Test { public static void main(String[] args) { MyThread myThread = new MyThread(); myThread.start(); } } 实现 Runnable 接口#public class MyRunnable implements Runnable { @Override public void run() { // 执行体...  } } public class Test { public static void main(String[] args) { MyRunnable myRunnable = new MyRunnable(); Thread thread = new Thread(myRunnable); thread.</description>
    </item>
    
    <item>
      <title>加载器</title>
      <link>https://jiandar.github.io/docs/java/jvm/class-load/loader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/jvm/class-load/loader/</guid>
      <description>加载器#类加载# 虚拟机加载class文件到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的Class对象  类加载器# 实现 “通过一个类的全限定名来获取描述此类的二进制字节流” 动作的代码模块，称为类加载器。 相同的字节码被不同的类加载器加载的类不相等。  类加载器类型#  启动类加载器
 BootstrapClassLoader C++ 编写，负责加载 jre/lib 下面的核心类库（java.lang.*等）    扩展类加载器
 ExtClassLoader Java 编写，负责加载 jre/lib/ext 目录下的一些扩展类库， 只有一个实例。    应用程序类加载器
 AppClassLoader Java 编写，负责加载应用程序的主函数类 ， 只有一个实例。    用户自定义类加载器
 CustomClassLoader Java 编写，负责加载指定路径的 class 文件    双亲委派机制# 当类加载器需要加载某一个 .class 字节码文件时，它会首先将这个任务委托给其父类加载器。 递归这个操作，直至传递到顶层的启动类加载器。 只有当父类加载器无法完成此加载任务时，子类加载器才会自己去加载。  双亲委派的作用# 防止类的重复加载。通过委派的方式，判断上级是否已经加载过该 .</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/creational/01-singleton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/creational/01-singleton/</guid>
      <description>单例模式#概述# 英文：Singleton Pattern 简述：保证一个类仅有一个实例，并且提供一个全局访问点 归纳：世上只有一个我 目的：保证独一无二 案例：CEO  示例#饿汉式# 一般情况下，推荐使用  // 在类初始化时，已经自行实例化 public class Singleton { private static final Singleton instance = new Singleton(); private Singleton(){} public static Singleton getInstance(){ return instance; } } 懒汉式# 一般情况下，不建议使用  // 在第一次调用的时候实例化自己 public class Singleton { private static volatile Singleton instance = null; private Singleton(){} public static Singleton getInstance(){ //双重判定：效率、同步  if(instance == null){ synchronized(Singleton.</description>
    </item>
    
    <item>
      <title>基础知识</title>
      <link>https://jiandar.github.io/docs/computer/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/computer/basic/</guid>
      <description>基础知识#计算机网络# 指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统 组成：硬件系统（终端计算机、网络设备、传输介质）、软件系统（网络通信软件、网络设备软件）  通信协议# Communication Protocol 是指双方实体完成通信或服务所必须遵循的规则和约定  软件结构#   C/S B/S     Client/Server，即客户机/服务器架构 Browser/Server，即浏览器/服务器架构   例如：QQ、office 例如：京东、淘宝、百度   使用软件前，需先安装客户端软件更新时，客户端需要更新不能跨平台使用通信采用自有协议，相对来说较安全 本质上也是C/S，只不过B/S软件使用浏览器作为客户端软件不需要安装，可使用浏览器直接访问软件更新时，客户端不需要更新可以跨平台使用通信采用的是HTTP协议，相对来说不安全    进制# 即进位计数制 几进制就是满几进一     二进制 0、1     八进制 0、1、2、3、4、5、6、7、8   十进制 0、1、2、3、4、5、6、7、8、9   十六进制 0、1、2、3、4、5、6、7、8、9、a、b、c、d、e、f    编码# 编码：依据一定的规则，将字符转换为二进制编码的过程 解密：依据一定的规则，将二进制编码转换为字符的过程  字符集# 编码和解码所采用的规则，我们称为字符集 常用字符集  美国：ASCII 欧盟：ISO-8859-1 中国：GBK、GB2312（默认） 全球：UTF-8    </description>
    </item>
    
    <item>
      <title>字体样式</title>
      <link>https://jiandar.github.io/docs/dev-lang/css/style/font/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/css/style/font/</guid>
      <description>字体样式#属性属性说明属性值属性值说明color字体颜色color颜色值font-style字体风格normal正常italic斜体oblique斜体font-weight字体粗细100 - 900数值：400=normal，700=boldlighter更细normal标准bold粗体bolder更粗font-size字体尺寸size数值xx-small&amp;nbsp;&amp;nbsp;9px&amp;nbsp;x-small11px&amp;nbsp;&amp;nbsp; small13px&amp;nbsp; medium16px&amp;nbsp;&amp;nbsp; large19px&amp;nbsp;x-large23pxxx-large28pxfont-family字体系列字体名Times、&#34;</description>
    </item>
    
    <item>
      <title>引用类型</title>
      <link>https://jiandar.github.io/docs/java/jvm/gc/reference-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/jvm/gc/reference-type/</guid>
      <description>引用类型#强引用# 指普通的对象引用  // 对于具有强引用的对象，就算出现OOM，垃圾回收器也不会对该对象进行回收。 Object strongReference = new Object(); // 只有当强引用和对象之间的关联被中断时，对象才会被回收 strongReference = null; 软引用# 对于只有软引用的对象，当内存空间不充足时，它会被回收；当空间充足时，它不会被回收； 应用场景：高速缓存、读取大量本地图片  // 强引用 String str = new String(&amp;#34;abc&amp;#34;); // 软引用 SoftReference&amp;lt;String&amp;gt; softReference = new SoftReference&amp;lt;&amp;gt;(str); System.out.println(softReference.get()); 弱引用# 对于只有弱引用的对象，不管内存空间是否充足，它都会被回收 应用场景：读取大量本地图片  // 强引用 String str = new String(&amp;#34;abc&amp;#34;); // 弱引用 WeakReference&amp;lt;String&amp;gt; weakReference = new WeakReference&amp;lt;&amp;gt;(str); System.out.println(weakReference.get()); // WeakHashMap：键是&amp;#34;弱键&amp;#34;，通过弱引用来管理 entry Map&amp;lt;Integer, String&amp;gt; weakMap = new WeakHashMap&amp;lt;&amp;gt;(); Integer key = new Integer(1); weakMap.</description>
    </item>
    
    <item>
      <title>数据类型、运算符</title>
      <link>https://jiandar.github.io/docs/database/mysql/basic/dataType-operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/database/mysql/basic/dataType-operator/</guid>
      <description>数据类型、运算符#数据类型#整数类型#   类型 描述 大小 范围（有符号） 范围（无符号）     TINYINT 迷你整形 1 字节 (-128，127) (0，255)   SMALLINT 小整形 2 字节 (-32 768，32 767) (0，65 535)   MEDIUMINT 中整形 3 字节     INT或INTEGER 标准整形 4 字节     BIGINT 大整形 8 字节      小数类型# 语法：如Float(M,D)，M表示数值总位数，D代表小数部分位数     类型 描述 大小     FLOAT 单精度浮点型 4 字节   DOUBLE 双精度浮点型 8 字节   DECIMAL 数值型 16 字节    日期时间类型#   类型 描述 大小 格式 范围     YEAR 年 1 字节 YYYY 1901 ~ 2155   DATE 日期 3 字节 YYYY-MM-DD 1000-01-01 ~ 9999-12-31   TIME 时间 3 字节 HH:MM:SS &amp;lsquo;-838:59:59&amp;rsquo; ~ &amp;lsquo;838:59:59&amp;rsquo;   TIMESTAMP 时间戳 4 字节 YYYYMMDD HHMMSS 1970-01-01 00:00:00 ~ 2038-1-19 11:14:07   DATETIME 日期时间 8 字节 YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00 ~9999-12-31 23:59:59    字符串类型#   类型 描述 大小     CHAR 定长字符 0-255字节   VARCHAR 变长字符 0-65535 字节   TINYTEXT 短文本 0-255字节   TEXT 文本 0-65 535字节   MEDIUMTEXT 长文本 0-16 777 215字节   LONGTEXT 极大文本 0-4 294 967 295字节   TINYBLOB 二进制，短文本 0-255字节   BLOB 二进制，文本 0-65 535字节   MEDIUMBLOB 二进制，长文本 0-16 777 215字节   LONGBLOB 二进制，极大文本 0-4 294 967 295字节    运算符#算术运算符#   运算符 描述     + 加法   - 减法   * 乘法   /、DIV 除法   %、MOD 取余    逻辑运算符#   运算符 描述     NOT、!</description>
    </item>
    
    <item>
      <title>文档标签</title>
      <link>https://jiandar.github.io/docs/dev-lang/html/document/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/html/document/</guid>
      <description>文档标签#   标签 说明     &amp;lt;!DOCTYPE&amp;gt; 定义文档类型   &amp;lt;html&amp;gt; 定义 HTML 文档   &amp;lt;head&amp;gt; 定义网页的头部   &amp;lt;body&amp;gt; 定义网页的主体    头部标签#   标签 说明     &amp;lt;title&amp;gt; 定义网页的标题   &amp;lt;meta&amp;gt; 定义网页的元数据   &amp;lt;base&amp;gt; 定义页面链接标签的默认链接地址   &amp;lt;link&amp;gt; 定义外部资源   &amp;lt;script&amp;gt; 定义脚本文件   &amp;lt;style&amp;gt; 定义样式文件    </description>
    </item>
    
    <item>
      <title>时间复杂度</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/time-complexity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/time-complexity/</guid>
      <description>时间复杂度#算法的效率# 由以下两个复杂度来评估，算法主要研究的是时间复杂度 时间复杂度：评估执行程序所需的时间。 空间复杂度：评估执行程序所需的存储空间。  时间频度# 一个算法花费的时间与算法中语句的执行次数，是成正比的 一个算法中语句的执行次数，称为时间频度，记为T(n)  时间复杂度# 记作 T(n)=O(f(n))，表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同 n：问题规模 f(n)：是 n 的某个函数 T(n)：算法中语句总的执行次数，是 n 的某个函数  推导时间复杂度# 用常数1取代运行时间中的所有加法常数。 在修改后的运行次数函数中，只保留最高阶项。 如果最高阶项存在且不是1，则去除与这个项相乘的常数。  示例：T(n) = 2n²+7n+6 =&amp;gt; T(n) = 2n²+7n+1 =&amp;gt; T(n) = 2n² =&amp;gt; T(n) = n² 记为 O(n²) 常见时间复杂度# O(1) &amp;lt; O(logn) &amp;lt; O(n) &amp;lt; O(nlogn)&amp;lt; O(n²) &amp;lt; O(n³ ) &amp;lt; O(2ⁿ ) &amp;lt; O(n!</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://jiandar.github.io/docs/java/basic-feature/Java/regular-expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-feature/Java/regular-expressions/</guid>
      <description>正则表达式#简介# Regular Expression 是一种字符串匹配的描述模式，用来检索、替换那些符合某个规则的字符串  语法#转义字符# 特殊字符：( ) [ ] { } 、? * + 、^ $、 . \ |     构造 匹配     x 字符 x   \ 反斜线字符   \t 水平制表符   \v 垂直制表符   \r 回车符   \n 换行符   \f 换页符    普通字符类#   构造 匹配     [abc] 包含：a、b 或 c   [^abc] 排除：任何字符，除了 a、b 或 c   [a-z] 区间：a 到 z   [a-zA-Z] 并集：a 到 z 或 A 到 Z   [a-z&amp;amp;&amp;amp;[^bc]] 交集：a 到 z，除了 b 和 c    预定义字符类#   构造 匹配 构造 匹配     .</description>
    </item>
    
    <item>
      <title>死锁</title>
      <link>https://jiandar.github.io/docs/java/concurrency/problem/deadlock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/problem/deadlock/</guid>
      <description>死锁#概述# 两个或两个以上的线程，在执行过程中，因争夺资源而造成的一种相互等待的现象  产生条件#   互斥使用 即当资源被一个线程使用(占有)时，别的线程不能使用     不可抢占 资源请求者不能强制从资源占有者手中夺取资源，资源只能由资源占有者主动释放   请求和保持 即当资源请求者在请求其他的资源的同时保持对原有资源的占有   循环等待 即存在一个等待队列：P1占有P2的资源，P2占有P3的资源，P3占有P1的资源。这样就形成了一个等待环路    图示#示例#public class HoldThread implements Runnable { private String lockA; private String lockB; public HoldThread(String lockA, String lockB) { this.lockA = lockA; this.lockB = lockB; } @Override public void run() { String threadName = Thread.</description>
    </item>
    
    <item>
      <title>版本控制</title>
      <link>https://jiandar.github.io/docs/dev-tool/tools/git/version-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-tool/tools/git/version-control/</guid>
      <description>版本控制#概述#  版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统
  功能：
 协同修改：多人并行不悖的修改服务器端的同一个文件。 数据备份：不仅保存目录和文件的当前状态， 还能够保存每一个提交过的历史状态。 版本管理：在保存每一个版本的文件信息的时候要做到不保存重复数据， 以节约存储空间， 提高运行效率。 权限控制：对参与开发的人员进行权限控制及代码审核 历史记录：查看修改人、 修改时间、 修改内容、 日志信息。将本地文件恢复到某一个历史状态。 分支管理：允许开发团队在工作过程中多条生产线同时推进任务， 进一步提高效率    分类#本地式# 用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别 好处就是简单，但是特别容易犯错  集中式# 使用一个单一的集中管理的服务器，保存所有文件的修订版本 而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新 增量维护，特点：  数据不安全：存在单点故障、黑客攻击的问题，需做好数据备份 服务器压力大：所有操作都需要与服务器交互，受限于宽带 强调集中管理：适合人数不多的项目    分布式# 客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录。 全量维护，特点：  数据安全完整：所有节点都是服务器，无带宽和性能瓶颈；提交全部使用SHA1哈希 效率高：提交为本地操作，全离线操作；编码不会被冲突打断 强调个体：适合分布式开发    SVN# 是基于差异的版本控制，存储的是一组基本文件和每个文件随时间逐步累积的差异 优缺点：节省磁盘空间，耗时、效率低。 不适合的领域：跨地域的协同开发、追求高质量代码和代码门禁  Git# 是基于快照的版本控制，存储的是文件的一系列快照 优缺点：版本切换时非常快，占用磁盘空间较大 不适合的领域：目录级别的读授权、word等二进制文档的版本控制  </description>
    </item>
    
    <item>
      <title>用户权限</title>
      <link>https://jiandar.github.io/docs/database/mysql/advanced-feature/user-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/database/mysql/advanced-feature/user-auth/</guid>
      <description>用户权限#用户管理#-- 查询用户信息 select * from mysql.user; -- 创建用户 -- @后为主机域，可使用占位符 create user &amp;#39;username&amp;#39;@&amp;#39;localhost&amp;#39; identified by &amp;#39;password&amp;#39;; -- 删除用户 drop user &amp;#39;username&amp;#39;@&amp;#39;localhost&amp;#39;; -- 修改root用户密码 mysqladmin -u root -h localhost -p password &amp;#34;password&amp;#34; -- root用户修改普通用户密码 set password for &amp;#39;username&amp;#39;@&amp;#39;localhost&amp;#39;=password(&amp;#39;password&amp;#39;); 权限管理# 数据权限：增删改查（select\update\delete\insert） 结构权限：结构操作（create\drop） 管理权限：权限管理（create user\grant\revoke）  # 新增grant 权限列表 on 数据库.表名 to 用户;# 删除revoke 权限列表 on 数据库.表 from 用户;-- 授予username用户，所有数据库所有表的，增删改查权限 grant select,insert,update,delete on *.* to &amp;#39;username&amp;#39;@&amp;#39;localhost&amp;#39;; -- 授予username用户，所有数据库所有表的，所有权限 grant all on *.</description>
    </item>
    
    <item>
      <title>类和对象</title>
      <link>https://jiandar.github.io/docs/java/oop/class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/oop/class/</guid>
      <description>类和对象#概述# 类：是一个模板，它描述一类对象的状态和行为。 对象：是类的一个实例，有状态和行为。  构造方法# 每个类都有构造方法。 如果没有显式定义，Java编译器将会为该类提供一个默认构造方法。 在创建一个对象的时候，至少要调用一个构造方法。 构造方法的名称必须与类同名。 一个类可以有多个构造方法。  public class Puppy{ public Puppy(){ } public Puppy(String name){ // 这个构造器仅有一个参数：name  } } 创建对象#// 创建类 class 类名{ // 成员变量定义...  // 方法定义... } // 创建对象，调用类构造方法 className myObject = new className(); 对象操作#public class Puppy { private String name; public Puppy(String name) { this.name = name; } public String getName() { return this.</description>
    </item>
    
    <item>
      <title>线程池 - 原理</title>
      <link>https://jiandar.github.io/docs/java/concurrency/threadpool/threadpool-theory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/threadpool/threadpool-theory/</guid>
      <description>线程池原理#核心参数# 创建线程池主要是 ThreadPoolExecutor 类来完成  corePoolSize# 核心线程数 如果线程池中的线程数小于 corePoolSize，则会创建新线程来执行新提交的任务 如果线程池中的线程数到达 corePoolSize，则不会创建新线程，而是把新任务放入到缓存队列当中 类比：银行网点中，当值业务窗口数  maximumPoolSize# 最大线程数量 如果阻塞队列已满，且线程池中线程数量未超过 maximumPoolSize，就会创建新线程来执行新提交的任务 类比：银行网点中，最大业务窗口数  keepAliveTime、unit# 空闲线程的存活时间 如果线程数量超过 corePoolSize，且多余空闲线程的存活时间超过 keepAliveTime 时，会销毁空闲的线程 类比：银行网点中，加开的业务窗口，如果其空闲时间超过一定时限，则撤除  workQueue# 阻塞队列 用于保存被提交但尚未被执行的任务 类比：银行网点中，等候区  threadFactory# 创建线程的工厂类 可定制线程，一般使用默认即可  handler# 饱和策略 如果阻塞队列满了，并且没有空闲的线程，这时如果继续提交任务，就需要采取一种策略处理该任务。    策略 说明     AbortPolicy 默认策略， 直接拒绝所提交的任务，并抛出RejectedExecutionException异常   CallerRunPolicy 用调用者所在的线程来执行任务   DiscardOldestPolicy 丢弃掉阻塞队列中存放时间最久的任务，执行当前任务   DiscardPolicy 不处理直接丢弃掉任务      工作过程# 创建线程池后，等待提交过来的任务请求 当调用 execute() 添加一个新任务时，线程池会做如下判断：  如果当前运行的线程数量还小于 corePoolSize，则会创建新线程来执行新任务 如果当前运行的线程数量不小于 corePoolSize，则会将提交的任务放入阻塞队列中 如果当前阻塞队列满了，且当前运行的线程数量还小于 maximumPoolSize，则创建线程运行这个任务 如果当前阻塞队列满了，且当前运行的线程数量不小于 maximumPoolSize，则启动拒绝策略   当一个线程完成任务时，它会从队列中取下一个任务来执行 当一个线程空闲超过一定时间，并且此时当前运行的线程大于 corePoolSize 时，这个线程会被销毁  </description>
    </item>
    
    <item>
      <title>职业规划</title>
      <link>https://jiandar.github.io/docs/private/employment/career-plan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/private/employment/career-plan/</guid>
      <description>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
career-plan.md</description>
    </item>
    
    <item>
      <title>自我介绍</title>
      <link>https://jiandar.github.io/docs/private/p-info/self-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/private/p-info/self-introduction/</guid>
      <description>hZkxxXQy/9Nkn89QklXdUZRkWfdw1kTWHYP6zN5GIdAZNnUxdVfFfmW0DDHKX/F2BZ76JDVLoSJHc5G3aceWVHUfXxMQKkRKLPZaR+TD3xeklW6J/7iIeIWQgzTTln5uOlJg6L1ITqVLJ5Cix2OBSho/c++vLfH/lsJNtTL2MvRE/70mDOvFSm01rXxFqDQQq8YUqn9CGzUrq8+PEEn5PDjcdQkv/hB8ae4WwuW3ORLPfvH3UiUq1MMpnG6K1Z76yrWpJED2uOnRFZQ6xC36vd9mC8EdpFYpdfnri/rig7i4q3ajdFy12pJ6G5HyKgIl3yKtng7NJWIyNSmjGrpvGqlOWr2pCwdMESi6tUpJTVMaTnzEQCbCE8+j/40KkYuZovIQSm9xrwxjvQLGSWagngfxNXttmqoxv3nvwHjOy/VA0QiahlqA2+ceLfA4sLkkeRG8RSOJGUxUQvpZhjT5Iha+Om1YZU3fF4iUuDYhxN008m1iFD3IDG8+jFmx1m3yltgpTcR2sJ+r1e1lh3SMmiGgSx+E0NdhX9vNw9Ar8HAdQfz5qcQwHOMolWvuF4oa


self-introduction.md</description>
    </item>
    
    <item>
      <title>语法元素</title>
      <link>https://jiandar.github.io/docs/java/basic-grammar/syntax-element/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-grammar/syntax-element/</guid>
      <description>语法元素#Hello World#public class HelloWorld { public static void main(String []args) { System.out.println(&amp;#34;Hello World&amp;#34;); } }  将以上代码，保存为文件HelloWorld.java 进入cmd 命令窗口，进入目标文件所在的位置 编译代码： javac HelloWorld.java 运行：java HelloWorld  标识符# 大小写敏感 命名规则  由字母、数字、美元符（$）、下划线（_）组成 不可以数字开头 不可以使用关键字     包名 xxxyyyzzz     类名、接口名、枚举名 XxxYyyZzz   方法名、变量名 xxxYyyZzz   常量名 XXX_YYY_ZZZ      关键字#  Java语言里事先定义的、有特别意义的标识符，即保留字，均为小写</description>
    </item>
    
    <item>
      <title>边</title>
      <link>https://jiandar.github.io/docs/dev-lang/css/position/border/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/css/position/border/</guid>
      <description>边框#属性属性说明属性值属性值说明border简写属性border: \[宽度]\[样式][颜色]border-width | style | color简写属性&amp;nbsp;border-left | right | top | bottom简写属性&amp;nbsp;border-[ left | right | top | bottom ]-width边框宽度thin细边框medium中边框，默认thick粗边框size数值border-[ left | right | top | bottom ]-style边框样式none无边框hidden无边框，用于解决边框冲突dotted点状边框dashed虚线边框solid实线边框double双线边框groove3D 凹槽边框ridge3D 垄状边框inset3D inset 边框outset3D outset 边框border-[ left | right | top | bottom ]-color边框颜色transparent透明色，默认color颜色值边距#paddingpadding-left | right | top | bottom内边距marginmargin-left | right | top | bottom外边距值auto浏览器自动计算size数值简写&amp;nbsp;</description>
    </item>
    
    <item>
      <title>锁</title>
      <link>https://jiandar.github.io/docs/java/concurrency/lock/concurrency-lock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/lock/concurrency-lock/</guid>
      <description>锁#并发锁# 锁是用来控制多个线程访问共享资源的方式 一个锁能够防止多个线程同时访问共享资源  实现方案#synchronized#   存在层次 是一个Java关键字，基于JVM层面实现     锁的获取 假设A线程持有锁，B线程等待。如果A线程阻塞，B线程会一直等待   锁的释放 自动释放：当持有锁的线程执行完同步代码，释放锁；当线程执行发生异常，jvm会让线程释放锁   锁的状态 无法判断   锁的类型 可重入、不可中断、非公平   锁的机制 悲观锁机制    Lock#   存在层次 是一个Java接口，基于JDK层面实现     锁的获取 有多种方式获取锁，线程可以不用一直等待   锁的释放 手动释放：需要在finally中释放锁，不然容易造成线程死锁   锁的状态 可以判断   锁的类型 可重入、可中断、可公平/可非公平   锁的机制 乐观锁机制    性能# 推荐优先使用synchronized，而不是Lock synchronized：少量同步 Lock：大量同步  调度# synchronized：使用Object对象本身的wait 、notify、notifyAll调度机制 Lock：可以使用Condition进行线程之间的调度  锁的类型#偏向锁 / 轻量级锁 / 重量级锁# 详情  乐观锁 &amp;amp; 悲观锁#  乐观锁</description>
    </item>
    
    <item>
      <title>工厂模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/creational/02-factory/</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/creational/02-factory/</guid>
      <description>工厂模式#概述# 英文：Factory Pattern 简述：不同条件下创建不同实例 归纳：产品标准化，生产更高效 目的：封装创建细节 案例：实体工厂  示例#简单工厂#// 产品 public interface Phone { void function(); } // 类似产品：XiaoMi，Iphone public class HuanWei implements Phone{ @Override public void function() { System.out.println(&amp;#34;华为手机&amp;#34;); } } // 统一工厂 public class PhoneFactory { public static Phone createPhone(String type){ if (&amp;#34;XiaoMi&amp;#34;.equals(type)){ return new XiaoMi(); } if (&amp;#34;HuanWei&amp;#34;.equals(type)){ return new HuanWei(); } if (&amp;#34;Iphone&amp;#34;.equals(type)){ return new Iphone(); } return null; } } 工厂方法# 主要解决： 接口选择的问题 应用场景：  日志记录器（记录到硬盘/系统事件/远程服务器） 数据库访问（多种类型数据库） 连接服务器（多种通讯协议）    // 产品 public interface Phone { void function(); } // 类似产品：XiaoMi，Iphone public class HuanWei implements Phone{ @Override public void function() { System.</description>
    </item>
    
    <item>
      <title>AQS</title>
      <link>https://jiandar.github.io/docs/java/concurrency/lock/aqs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/lock/aqs/</guid>
      <description>AQS 原理#AQS# 抽象的队列同步器，AbstarctQueuedSynchronizer，简称AQS AQS 定义了一套多线程访问共享资源的同步器基础框架，许多同步类实现都依赖于它，如ReentrantLock、Semaphore&amp;hellip;  CLH 队列# 是一个FIFO双向队列。 （FIFO：First in First out，先入先出）   AQS 原理# AQS 维护了一个共享变量 state 和一个 CLH 队列。 线程通过 CAS 去改变 state 状态，成功则获取锁成功，失败则进入等待队列，等待被唤醒。  ASQ 实现# AQS的设计是基于模板模式。 AQS已实现了对等待队列的维护，自定义同步器只需要实现共享资源state的获取与释放方式即可。 AQS 定义了两种资源共享方式：  Exclusive：独占方式，只有一个线程能执行，如ReentrantLock Share：共享方式，多个线程可以同时执行，如Semaphore、CountDownLatch    同步状态# state用来表示当前的同步状态，根据当前state的值，来判断当前处于锁定状态还是其他状态  // 同步状态 private volatile int state; // 获取当前同步状态 int getState() // 设置当前同步状态 void setState(int newState) // 使用CAS设置当前同步状态，该方法能够保证设置同步状态时的原子性； // 参数expect为state的预期旧值，而update是需要修改的新值，若设置成功，方法返回true，否则false boolean compareAndSetState(int expect, int update) 需重写的方法#// 独占方式。尝试获取共享资源，成功则返回true，失败则返回false protected boolean tryAcquire(int arg) // 独占方式。尝试释放共享资源，成功则返回true，失败则返回false protected boolean tryRelease(int arg) // 共享方式。尝试获取共享资源，成功则返回正数，失败则返回负数，0表示无可用资源 protected int tryAcquireShared(int arg) // 共享方式。尝试释放共享资源，成功则返回true，失败则返回false protected boolean tryReleaseShared(int arg) // 当前同步器是否在独占模式下被线程占用。只有用到condition才需要去实现它 protected boolean isHeldExclusively() 提供的模板方法#// 独占方式，获取同步状态 public final void acquire(int arg) // 与acquire()相同，该方法响应中断 public final void acquireInterruptibly(int arg) // 在acquireInteruptibly()上增加了超时限制 public final boolean tryAcquireNanos(int arg, long nanosTimeout) // 独占方式，释放同步状态 public final boolean release(int arg) // 共享方式，获取同步状态 public final void acquireShared(int arg) // 与acquireShared()相同，该方法响应中断 public final void acquireSharedInterruptibly(int arg) // 在acquireSharedInterruptibly()基础上增加了超时限制。 public final boolean tryAcquireSharedNanos(int arg, long nanosTimeout) // 共享方式，释放同步状态 public final boolean releaseShared(int arg) // 获取等待在同步队列上的线程集合 public final Collection&amp;lt;Thread&amp;gt; getQueuedThreads() </description>
    </item>
    
    <item>
      <title>ArrayList</title>
      <link>https://jiandar.github.io/docs/java/container/List/ArrayList/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/container/List/ArrayList/</guid>
      <description>ArrayList#概述# 是一个动态数组，其容量能够动态增长  特点#   顺序 有序     元素 允许为 null，允许重复   效率 修改和查询元素效率高，插入和移除元素效率不高   多线程 线程不安全    继承关系#public class ArrayList&amp;lt;E&amp;gt; extends AbstractList&amp;lt;E&amp;gt; implements List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable    AbstractList、List接口 提供了列表的骨干功能     RandomAccess接口 提供了随机访问功能   Cloneable接口 支持克隆   Serializable接口 支持序列化    成员变量#// 默认的初始化容量 private static final int DEFAULT_CAPACITY = 10; // 指定容量为0时，返回该空数组 private static final Object[] EMPTY_ELEMENTDATA = {}; // 当调用无参构造方法，返回的是该空数组 private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; // 保存元素的数组 transient Object[] elementData; // 元素的个数 private int size; // 最大数组容量 private static final int MAX_ARRAY_SIZE = Integer.</description>
    </item>
    
    <item>
      <title>BlockingQueue</title>
      <link>https://jiandar.github.io/docs/java/concurrency/container/BlockingQueue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/container/BlockingQueue/</guid>
      <description>BlockingQueue#阻塞队列# 队列，Queue，是一种先进先出（first in first out：FIFO）的抽象的数据结构 BlockingQueue，是一个支持两个附加操作的队列 当阻塞队列是空时，从队列中获取元素的操作将会被阻塞 当阻塞队列是满时，往队列中添加元素的操作将会被阻塞  核心方法#    抛出异常 返回特殊值 超时退出 一直阻塞     插入 add(e) offer(e) offer(e,time,unit) put(e)   移除 remove() poll() poll(time,unit) take()   检查 element() peek() / /        说明     抛出异常 当阻塞队列满时，再往队列 add 元素会抛 IllegalStateException:Queuefull当阻塞队列空时，再往队列 Remove 元素时候会抛出 NoSuchElementException   返回特殊值 插入方法，成功返回 true，失败返回 false移除方法，成功返回元素，队列里面没有就返回null   超时退出 当阻塞队列满时，队列会阻塞生产者线程一定时间，超过时限后生产者线程就会退出当阻塞队列空时，队列会阻塞消费者线程一定时间，超过时限后消费者线程就会退出   一直阻塞 当阻塞队列满时，生产者继续往队列里面 put 元素，队列会一直阻塞，直到 put 数据 or 响应中断退出当阻塞队列空时，消费者试图从队列 take 元素，队列会一直阻塞消费者线程，直到队列可用    常用队列#   队列 说明 实现     ArrayBlockingQueue 有界阻塞队列 由数组实现   LinkedBlockingQueue 有界阻塞队列 由链表实现   LinkedTransferQueue 无界阻塞队列 由链表实现   LinkedBlockingDeque 双端有界阻塞队列 由链表实现   DelayQueue 延迟无界阻塞队列    SynchronousQueue 单元素的阻塞队列    PriorityBlockingQueue 支持优先级的无界阻塞队列     应用# 线程池、消息中间件、生产者消费者模式  // 生产者消费者模式-传统版 public class ShareData { private int num = 0; private Lock lock = new ReentrantLock(); private Condition condition = lock.</description>
    </item>
    
    <item>
      <title>CyclicBarrier</title>
      <link>https://jiandar.github.io/docs/java/concurrency/tool/CyclicBarrier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/tool/CyclicBarrier/</guid>
      <description>CyclicBarrier#功能# 循环栅栏 多个线程互相等待，直到全部都到达同一个同步点，再继续一起执行  原理# 在CyclicBarrier类的内部有一个计数器 每个线程在到达屏障点的时候都会调用 await() 将自己阻塞，此时计数器会减 1 当计数器减为 0 的时候，所有因调用 await() 而被阻塞的线程将被唤醒  方法#// 构造方法：设置要拦截的线程数，及安全栅跳闸时无预定义的动作 public CyclicBarrier(int parties) // 构造方法：设置要拦截的线程数，及安全栅跳闸时执行的预定义动作 public CyclicBarrier(int parties, Runnable barrierAction) // 非定时等待 public int await() // 定时等待 public int await(long timeout, TimeUnit unit) // 定时等待 public void reset() 示例#// 集齐七龙珠 public static void main(String[] args) { CyclicBarrier cyclicBarrier = new CyclicBarrier(7, () -&amp;gt; { System.</description>
    </item>
    
    <item>
      <title>HashMap</title>
      <link>https://jiandar.github.io/docs/java/container/Map/HashMap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/container/Map/HashMap/</guid>
      <description>HashMap#概述# 是一个哈希表，存储的是键值对 (key-value) 映射。  特点#   键 允许为null（放在第一位），不允许重复     值 允许为null，允许重复   顺序 无序   效率 插入、获取的时间复杂度基本是 O(1)。遍历整个 Map 需要的时间与数组的长度成正比   多线程 线程不安全    继承关系#public class HashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; implements Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable {    AbstractMap、Map接口 提供了Map接口的骨干功能     Cloneable接口 支持克隆   Serializable接口 支持序列化    成员变量#// 默认初始容量为16 static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; // 默认负载因子为0.</description>
    </item>
    
    <item>
      <title>HashSet</title>
      <link>https://jiandar.github.io/docs/java/container/Set/HashSet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/container/Set/HashSet/</guid>
      <description>HashSet#概述# HashSet 基于 HashMap 实现，是 HashMap 的缩水版本  特点#   顺序 无序     元素 允许为 null，不允许重复   多线程 线程不安全    继承关系#public class HashSet&amp;lt;E&amp;gt; extends AbstractSet&amp;lt;E&amp;gt; implements Set&amp;lt;E&amp;gt;, Cloneable, java.io.Serializable    AbstractSet、Set接口 提供了 Set 接口的骨干功能     Cloneable接口 支持克隆   Serializable接口 支持序列化    成员变量#// 使用Map的key保存元素 private transient HashMap&amp;lt;E,Object&amp;gt; map; // 使用PRESENT作为Map所有key的value private static final Object PRESENT = new Object(); 构造方法#// 默认 public HashSet() { map = new HashMap&amp;lt;&amp;gt;(); } // 指定初始容量 public HashSet(int initialCapacity) { map = new HashMap&amp;lt;&amp;gt;(initialCapacity); } // 指定初始容量、负载因子 public HashSet(int initialCapacity, float loadFactor) { map = new HashMap&amp;lt;&amp;gt;(initialCapacity, loadFactor); } // 指定集合，转化为HashSet public HashSet(Collection&amp;lt;?</description>
    </item>
    
    <item>
      <title>NIO</title>
      <link>https://jiandar.github.io/docs/java/io-nio/nio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/io-nio/nio/</guid>
      <description>NIO# 写NIO程序时，经常使用ByteBuffer来读取或者写入数据，它是使用Native函数库直接分配堆外内存    方式 ByteBuffer.allocate(capability) ByteBuffer.allocateDirect(capability)     说明 分配的是JVM堆内存，属于GC管辖 直接分配OS本地内存，不属于GC管辖   效率 由于需要拷贝，所以速度相对较慢 由于不需要内存拷贝，所以速度相对较快      </description>
    </item>
    
    <item>
      <title>OOM 问题</title>
      <link>https://jiandar.github.io/docs/java/jvm/tuning/oom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/jvm/tuning/oom/</guid>
      <description>OOM 问题#内存溢出# Out Of Memory，内存溢出 java.lang.OutOfMemoryError     OOM 异常信息     栈内存溢出 java.lang.StackOverflowError   堆内存溢出 java.lang.OutOfMemoryError：Java heap space   元空间内存溢出 java.lang.OutOfMemoryError：MetaSpace   直接内存溢出 java.lang.OutOfMemoryError：Direct buffer memory    GC 回收时间过长# java.lang.OutOfMemoryError：GC overhead limit exceeded 超过 98% 的时间都在用来做 GC，且回收了不到 2% 的堆内存  不能再创建新的线程# java.lang.OutOfMemoryError：unable to create new native thread 原因：创建了太多的线程，超过系统承载极限 解决：想办法减少应用程序创建的线程的数量  </description>
    </item>
    
    <item>
      <title>synchronized</title>
      <link>https://jiandar.github.io/docs/java/concurrency/theory/synchronized/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/theory/synchronized/</guid>
      <description>synchronized#特性# 并发三特性：原子性、可见性、有序性 可重入性：是可重入锁  基本用法# synchronized 内置锁，是一种“对象锁”，锁的是对象而非引用变量，作用粒度是对象  同步原理#对象头# 实例数据：存放类的属性数据信息，包括父类的属性信息 对齐填充：非必须，仅仅是为了字节对齐 对象头：Mark Word、Class Metadata Address、Array Length    Mark Word 存储对象自身的运行时数据，如 hashCode、锁信息或分代年龄或GC标志等     Class Metadata Address 存储指向对象类型数据的指针   Array Length 存储数组长度（如果当前对象是数组）      锁记录# Lock Record，是线程私有的数据结构。 当线程进入同步代码块时，如果此同步对象没有被锁定，JVM会在当前线程的栈中创建Lock Record空间，用于存储锁对象的Mark Word的拷贝。 每一个被锁住的对象Mark Word都会和一个Lock Record关联，同时Lock Record中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。  监视器# Monitor，可以理解为一种同步机制、一个对象。任何一个对象都有一个Monitor与之关联。 Monitor只能被一个线程持有，此时当前对象就处于锁定状态，其它线程只能阻塞等待。 在JVM中，Synchronized是基于进入和退出Monitor对象，来实现方法同步和代码块同步。    MonitorEnter指令 插入在同步代码块的开始位置。当代码执行到该指令时，将会尝试获取该对象Monitor的所有权，即尝试获得该对象的锁；     MonitorExit指令 插入在方法结束处和异常处。JVM保证每个MonitorEnter必须有对应的MonitorExit；      同步优化# 为优化synchronized性能，在JDK1.</description>
    </item>
    
    <item>
      <title>停止线程</title>
      <link>https://jiandar.github.io/docs/java/concurrency/thread/thread-stop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/thread/thread-stop/</guid>
      <description>停止线程#正常结束# 程序运行结束，线程自动结束  使用退出标志# 使用一个停止标记，在线程中进行判断该标记的状态然后进行处理  public class MyThread extends Thread { private volatile boolean isShutDown = false; public void run() { while (!isShutDown) { // 执行体...  } } public void shutDown() { this.isShutDown = true; } } public class Test { public static void main(String[] args) throws Exception { MyThread thread = new MyThread(); thread.start(); Thread.sleep(5000); thread.shutDown(); } } 使用 interrupt()# 线程处于阻塞状态时，调用 interrupt() 会抛出 InterruptException 异常 线程未处于阻塞状态时，使用 isInterrupted() 判断线程的中断标志来退出循环  public class MyThread extends Thread { public void run() { // 非阻塞状态：通过判断中断标志来退出  while (!</description>
    </item>
    
    <item>
      <title>内存结构</title>
      <link>https://jiandar.github.io/docs/java/jvm/memory-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/jvm/memory-structure/</guid>
      <description>内存结构#运行时数据区# JVM 在执行 Java 程序的过程中，会把它所管理的内存区域划分为若干个不同的数据区域  方法区# 即永久代 用于存储类信息、常量、静态常量、即时编译后的代码 运行时常量池，也是方法区的一部分，用于存放编译期生成的各种字面量和符号引用  堆内存# 用于存储对象实例、数组 是垃圾收集器管理的主要区域 堆内存采用分代收集算法，又细分为：新生代（Eden区、SurvivorFrom区、SurvivorTo区）、老年代  虚拟机栈# 栈内存，是Java方法执行的内存模型 每个方法被执行时，都会创建一个栈帧来存储局部变量表、操作数栈、动态链接、方法出口等信息 方法从被调用到执行完成的过程，就对应着栈帧在虚拟机栈中从入栈到出栈的过程  本地方法栈# 与虚拟机栈相同，区别是虚拟机栈为执行 Java 方法服务，而本地方法栈则为 Native 方法服务  程序计算器# 在 Java 虚拟机中，唯一没有 OOM 的区域 是一小块内存空间，用于存储当前线程正在执行字节码指令的地址值  正在执行 Java 方法时，记录的是当前指令的地址 正在执行 Native 方法时，则为 Undefined    内存区域分代#新生代# 由于频繁创建对象，所以新生代会频繁触发 MinorGC 进行垃圾回收    分区 说明     Eden 区 Java 新对象的出生地（大对象直接分配到老年代）当 Eden 区内存不够的时候就会触发 MinorGC，对新生代区进行一次垃圾回收   ServivorFrom 区ServivorTo 区 存放 MinorGC 过程中的幸存者使用复制算法，From、To区交互配合使用      老年代# 主要存放应用程序中生命周期长的内存对象，老年代的对象比较稳定，所以 MajorGC 不会频繁执行  永久代# 指内存的永久保存区域，主要存放 Class 和 Meta（元数据）的信息 GC 不会在主程序运行期对永久区域进行清理 在JDK1.</description>
    </item>
    
    <item>
      <title>判定算法</title>
      <link>https://jiandar.github.io/docs/java/jvm/gc/judge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/jvm/gc/judge/</guid>
      <description>判定算法#引用计数法# 原理：通过计算引用的数量，来判断一个对象是否可以回收 缺陷：不能解决对象间循环引用的问题 实现：  给对象添加一个引用计数器，记录引用该对象的次数 当有地方引用该对象时，计数器加 1。当引用失效时，计数器减 1。 当计数器值为 0 时，代表为垃圾对象，就会被 GC 进行回收。    可达性分析法#  原理：通过判断对象是否可到达，来决定对象是否可以被回收
  实现：
 通过一系列的名为GC Roots的对象作为起始点。 从这些节点开始向下搜索，搜索所走过的路径称为引用链。 当从 GC Roots 到一个对象不可达时，则证明此对象是不可用的。    可以作为 GC Roots 的对象
 Java 虚拟机栈中正在引用的对象 本地方法栈中正在引用的对象 方法区常量引用的对象 静态属性引用的对象    </description>
    </item>
    
    <item>
      <title>加载过程</title>
      <link>https://jiandar.github.io/docs/java/jvm/class-load/load-process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/jvm/class-load/load-process/</guid>
      <description>加载过程#1、加载# 通过一个类的全限定名，获取定义此类的二进制字节流。 将这个字节流所代表的静态存储结构，转化为方法区的运行时数据结构。 在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区该类各种数据的访问入口。  2、验证# 目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全    阶段 说明     文件格式验证 验证字节流是否符合 Class 文件格式的规范，确保能被当前虚拟机处理。   元数据验证 对字节码进行语义验证，确保其描述信息符合 Java 语言规范的要求   字节码验证 通过数据流和控制流分析，确保程序语义是合法的、符合逻辑的   符号引用验证 验证符号引用是否为可用的直接引用，确保解析动作能正确执行。      3、准备# 为类变量（静态变量）分配内存，并将其初始化为系统默认值（零值） 如果是 final 修饰的类变量，则会直接初始化设定的值。  4、解析# 将常量池内的符号引用替换为直接引用 解析：类或接口、字段、类方法、接口方法  5、初始化#  初始化阶段是执行类构造器 &amp;lt;clinit&amp;gt;() 方法的过程</description>
    </item>
    
    <item>
      <title>变量、函数</title>
      <link>https://jiandar.github.io/docs/database/mysql/basic/variable-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/database/mysql/basic/variable-function/</guid>
      <description>变量、函数#变量# 局部变量：仅在结构体语句块中有效 会话变量：在当前用户的当次连接有效 全局变量：全局有效  系统变量#show variables [like &amp;#39;...&amp;#39;]; -- 查询多个 select @@varName; -- 查询单个  set varName = value; -- 局部修改（会话级别） set global varName = value; -- 全局修改 set @@global.varName = value; -- 全局修改  -- 示例：修改自动编号步长 SET GLOBAL auto_increment_increment = 1; 会话变量#-- 设置 set @varName = value; set @varName := value; -- 查看 select @varName; -- 示例 SELECT @name := stu_name,@age := stu_age FROM student WHERE stu_id = &amp;#39;1&amp;#39;; SELECT stu_name,stu_age FROM student WHERE stu_id = &amp;#39;1&amp;#39; INTO @name,@age; 局部变量#-- 设置 declare varName dataType [attribute]; -- 示例 declare age int default 18; 函数#内置函数# MySQL 内置函数  自定义函数#  自定义函数是属于用户级别的，只有当前客户端对应的数据库中可以使用</description>
    </item>
    
    <item>
      <title>存储过程</title>
      <link>https://jiandar.github.io/docs/database/mysql/advanced-feature/store-procedure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/database/mysql/advanced-feature/store-procedure/</guid>
      <description>存储过程#定义# stored procedure，是一组为了完成特定功能的SQL 语句集，存储在数据库中， 经过第一次编译后再次调用不需要再次编译（效率比较高）  存储过程管理## 创建修改语句结束符create procedure 过程名字([参数列表])begin过程体end 语句结束符 修改语句结束符（改回来）# 查询show procedure status [like &amp;#39;...&amp;#39;];show create procedure 过程名;# 使用call 过程名([实参列表]);# 删除drop procedure 过程名;-- 示例 DELIMITER $$ CREATE PROCEDURE proc_countUser() BEGIN SELECT COUNT(*) FROM t_user; END $$ DELIMITER ; 存储过程的形参类型# IN：参数从外部传入，供过程内部使用。默认类型 OUT：参数从过程内部传出，供外部使用。 INOUT：参数从外部传入，过程内部使用后，又传出，供外部使用。  DELIMITER $$ CREATE PROCEDURE set_counter(INOUT count INT(4),IN inc INT(4)) BEGIN SET count = count + inc; END $$ DELIMITER ; 存储过程 vs 函数#   区别 存储过程 函数     标识符 PROCEDURE FUNCTION   返回值 无 有   使用 不能在select语句中使用 可以在select语句中使用    </description>
    </item>
    
    <item>
      <title>宽高</title>
      <link>https://jiandar.github.io/docs/dev-lang/css/position/width-height/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/css/position/width-height/</guid>
      <description>宽高#   属性 属性说明     width 宽度   min-width 最小宽度   max-width 最大宽度   height 高度   min-height 最小高度   max-height 最大高度       属性值 属性值说明     auto 默认   size 数值   inherit 继承    </description>
    </item>
    
    <item>
      <title>封装</title>
      <link>https://jiandar.github.io/docs/java/oop/encapsulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/oop/encapsulation/</guid>
      <description>封装#封装# 将属性和行为绑定起来，并隐藏部分实现的细节，对外只提供访问接口。  优点# 降低耦合 隐藏细节 类内部可自由修改  示例# 设为私有 对外提供公共访问方法  public class Person{ private String name; public String getName(){ return name; } public void setName(String name){ this.name = name; } } </description>
    </item>
    
    <item>
      <title>并发修改异常</title>
      <link>https://jiandar.github.io/docs/java/concurrency/problem/ConcurrentModificationException/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/problem/ConcurrentModificationException/</guid>
      <description>并发修改异常#故障现象#public class Test { public static void main(String[] args) { ArrayList&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;Integer&amp;gt;(); list.add(2); Iterator&amp;lt;Integer&amp;gt; iterator = list.iterator(); while(iterator.hasNext()){ Integer integer = iterator.next(); if(integer==2) list.remove(integer); } } } Exception in thread &amp;#34;main&amp;#34; java.util.ConcurrentModificationException at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:911) at java.util.ArrayList$Itr.next(ArrayList.java:861) at org.local.Test.main(Test.java:15) 导致原因# 并发争抢修改导致。一个正在写，另一个抢夺，导致数据不一致，并发修改异常  解决方案# new Vector&amp;lt;&amp;gt;(); Collections.synchronizedList(new ArrayList&amp;lt;&amp;gt;()); new CopyOnWriteArrayList&amp;lt;&amp;gt;();  </description>
    </item>
    
    <item>
      <title>异常处理</title>
      <link>https://jiandar.github.io/docs/java/basic-feature/Java/exception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-feature/Java/exception/</guid>
      <description>异常处理#异常# 就是程序出现了不正常的情况  异常体系#  编译时异常
 RuntimeException之外的异常，又称受检异常 在编译期间出现的异常，必须处理，否则无法通过编译 比如：FileNotFoundException    运行时异常
 RuntimeException及其子类，又称非受检异常 在运行期间出现的异常，可延后处理 比如：NullPointerException    抛出异常#  默认方式
 JVM会把异常信息输出在了控制台，并停止程序    throw 方式
 用在方法内，后面跟异常对象    thorws 方式
 用在方法声明上，后面跟异常类名 可以跟多个，用逗号隔开    // 在方法内 throw new Exception(); // 在方法声明上 public void method() throws Exception { } 捕获异常# try - catch - finally  try { // 可能出现异常的语句 } catch (异常类 变量){ // 处理异常的代码，可以有多个  // 出现异常，才会执行 } finally { // 不是必须的  // 无论是否产生异常，一定会执行的语句 } 自定义异常# 自定义类，使之继承 Exception 等异常类  // 用法与内置异常类一样 public class MyException extends Exception { MyException(String message) { super(message); } } finally &amp;amp; return# 执行逻辑  // finally块前的return语句，记为out-return // finally块内的return语句，记为in-return  // finally块中无return： // 执行out-return，保存结果到缓存槽，执行finally块，返回缓存槽的数据  // finally块中有return： // 执行out-return，保存结果到缓存槽，执行finally块，执行in-return提前退出  场景示例  // finally块中无return，且未操作变量 public static void test1() { try { System.</description>
    </item>
    
    <item>
      <title>数据类型</title>
      <link>https://jiandar.github.io/docs/java/basic-grammar/data-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-grammar/data-type/</guid>
      <description>数据类型#计算机容量单位# 1Byte = 8 bit， 1KB = 1024Byte bit：位，比特，是计算机运算的基础，代表二进制数位，取值范围：0或1 Byte：字节，计算机文件大小的基本计算单位，用于表示计算机中的一个字符  基本数据类型#   数据类型 描述 字节 默认值 取值范围 举例说明     byte 位 1 0 -128 ~ 127 byte b = 10;   short 短整数 2 0 -32768 ~ 32767 short s = 10;   int 整数 4 0 -2^31 - 2^31-1 int i = 10;   long 长整数 8 0l -2^63 - 2^63-1 long l = 10l;   float 单精度 4 0.</description>
    </item>
    
    <item>
      <title>文本标签</title>
      <link>https://jiandar.github.io/docs/dev-lang/html/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/html/text/</guid>
      <description>文本标签#   标签 说明     &amp;lt;b&amp;gt; 定义粗体文本（无语义）   &amp;lt;i&amp;gt; 定义斜体文本（无语义）   &amp;lt;u&amp;gt; 定义下划线文本（无语义）   &amp;lt;s&amp;gt; 定义删除线文本（无语义）       &amp;lt;del&amp;gt; 定义被删除文本（有语义）   &amp;lt;ins&amp;gt; 定义被插入文本（有语义）   &amp;lt;em&amp;gt; 定义强调文本（有语义）   &amp;lt;strong&amp;gt; 定义强调文本（有语义，语气更为强烈）       &amp;lt;sup&amp;gt; 定义上标文本   &amp;lt;sub&amp;gt; 定义下标文本   &amp;lt;big&amp;gt; 定义大号字   &amp;lt;small&amp;gt; 定义小号字   &amp;lt;code&amp;gt; 定义计算机代码   &amp;lt;pre&amp;gt; 定义预格式文本    排版标签#   标签 说明     &amp;lt;h1&amp;gt;&amp;hellip;&amp;hellip;&amp;lt;h6&amp;gt; 定义 HTML 标题   &amp;lt;p&amp;gt; 定义一个段落   &amp;lt;br&amp;gt; 定义换行   &amp;lt;hr&amp;gt; 定义水平线   &amp;lt;div&amp;gt; 定义文档中的块   &amp;lt;span&amp;gt; 定义文档中的块    </description>
    </item>
    
    <item>
      <title>文本样式</title>
      <link>https://jiandar.github.io/docs/dev-lang/css/style/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/css/style/text/</guid>
      <description>文本样式#属性属性说明属性值属性值说明text-align水平对齐&amp;nbsp;
仅对块级元素有效left左对齐center居中right右对齐justify两端对齐vertical-align垂直对齐baseline默认sub下标super上标top最顶端对齐text-top顶端对齐middle中部对齐bottom最底端对齐text-bottom底端对齐size数值line-height文本行高size数值word-spacing单词间距size数值letter-spacing字符间距size数值text-indent首行缩进size数值text-transform文本大小写none默认capitalize单词大写字母开头uppercase字母都大写lowercase字母都小写text-decoration修饰文本none默认underline划线，文本底部overline划线，文本顶部line-through划线，穿过文本文字基线#</description>
    </item>
    
    <item>
      <title>方法引用</title>
      <link>https://jiandar.github.io/docs/java/basic-feature/Java8/method-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-feature/Java8/method-reference/</guid>
      <description>方法引用#方法引用# 通过方法的名字来指向一个方法 使用一对冒号 :: 进行引用  引用方式#public class Test { public static void main(String[] args) { // 构造器引用  // Class::new或Class&amp;lt; T &amp;gt;::new  final Car car = Car.create(Car::new); final List&amp;lt;Car&amp;gt; cars = Collections.singletonList(car); // 静态方法引用  // Class::static_method  cars.forEach(Car::collide); // 特定类的任意对象的方法引用  // Class::method  cars.forEach(Car::repair); // 特定对象的方法引用  // instance::method  final Car police = Car.create(Car::new); cars.forEach(police::follow); } } @FunctionalInterface public interface Supplier&amp;lt;T&amp;gt; { T get(); } public class Car { public static Car create(final Supplier&amp;lt;Car&amp;gt; supplier) { return supplier.</description>
    </item>
    
    <item>
      <title>日期时间</title>
      <link>https://jiandar.github.io/docs/java/basic-class/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-class/datetime/</guid>
      <description>日期时间#Java8 Time API# 新增的日期时间类都是不可变的    Instant 时间戳     LocalDateTime 年月日时分秒毫秒   LocalDate 年月日   LocalTime 时分秒毫秒      转换：新旧日期时间#  Date &amp;lt;&amp;mdash;&amp;gt; Instant
// 新旧日期类，都是通过Instant进行互转 Date now = new Date(); Instant instant = now.toInstant(); Date date = Date.from(instant);   Instant &amp;lt;&amp;mdash;&amp;gt; ZonedDateTime、LocalDateTime、LocalDate、LocalTime
Instant now = Instant.now(); // Instant &amp;lt;=&amp;gt; ZonedDateTime ZonedDateTime zonedDateTime = now.</description>
    </item>
    
    <item>
      <title>简历编写</title>
      <link>https://jiandar.github.io/docs/private/employment/resume-edit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/private/employment/resume-edit/</guid>
      <description>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
resume-edit.md</description>
    </item>
    
    <item>
      <title>线程池 - 种类</title>
      <link>https://jiandar.github.io/docs/java/concurrency/threadpool/threadpool-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/threadpool/threadpool-type/</guid>
      <description>常见线程池#四种线程池#newSingleThreadExecutor# 创建一个单线程化的线程池 它只会用唯一的工作线程来执行任务，保证所有任务都按照指定顺序执行 public static ExecutorService newSingleThreadExecutor() { return new FinalizableDelegatedExecutorService (new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&amp;lt;Runnable&amp;gt;())); }   newFixedThreadPool# 创建一个指定工作线程数量的线程池 可控制线程的最大并发数，超出的线程会在队列中等待。 public static ExecutorService newFixedThreadPool(int nThreads) { return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&amp;lt;Runnable&amp;gt;()); }   newCachedThreadPool# 创建一个可缓存线程池 如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则创建新线程 public static ExecutorService newCachedThreadPool() { return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&amp;lt;Runnable&amp;gt;()); }   newScheduledThreadPool# 创建一个可定期或者延时执行任务的定长线程池，支持定时及周期性任务执行 public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) { return new ScheduledThreadPoolExecutor(corePoolSize); } public ScheduledThreadPoolExecutor(int corePoolSize) { super(corePoolSize, Integer.</description>
    </item>
    
    <item>
      <title>网络模型</title>
      <link>https://jiandar.github.io/docs/computer/network-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/computer/network-model/</guid>
      <description>网络模型#概述# 为了使计算机厂家生产的计算机可以相互通讯，国际标准化组织（ISO）制定了OSI模型，该模型定义了不同计算机互联的标准 OSI模型是理论模型，一般用于理论研究，其分层有些冗余，实际应用中选择TCP/IP的四层模型 常见网络模型：TCP/IP四层模型、TCP/IP五层模型、OSI七层模型  OSI 模型# Open System Interconnection 开放式系统互联参考模型，是一个逻辑上的定义和规范     OSI层 功能 设备     应用层 为应用程序提供服务 网关   表示层 数据格式转化、数据加密 网关   会话层 建立、管理和维护会话 网关   传输层 建立、管理和维护端到端的链接 网关   网络层 IP选址及路由选择 路由器   数据链路层 提供介质访问和链路管理 交换机、网桥   物理层 在物理媒介体上传输数据 网卡，网线，集线器，中继器，调制解调器    协议栈#</description>
    </item>
    
    <item>
      <title>运行原理</title>
      <link>https://jiandar.github.io/docs/dev-tool/tools/git/basic-logic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-tool/tools/git/basic-logic/</guid>
      <description>工作原理#原理# Git 把数据看作是微型文件系统的一系列快照， 每次提交更新时，Git 都会对当前的全部文件制作一个快照并保存这个快照的索引（哈希算法）， 为了高效， 如果文件没有修改，Git 不再重新存储该文件， 而是只保留一个链接指向之前存储的文件。  特性# 直接记录快照，而非差异比较 近乎所有操作都是本地执行，不需要联网 时刻保持数据完整性 一般只是添加数据  工程区域# 工作区：日常工作的工程目录 暂存区：又称索引，工程根目录.git/index 文件夹 版本区：又称本地仓库，工程根目录.git文件夹  工作流程# 文件必须一步一步的依次提交 文件可以依次检出，也可以直接从远程仓库检出到工作目录  </description>
    </item>
    
    <item>
      <title>选择排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/selection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/selection/</guid>
      <description>选择排序#算法步骤# 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。 重复第二步，直到所有元素均排序完毕。  动图演示#代码实现#public class SelectionSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { // 总共要经过 N-1 轮比较  for (int i = 0; i &amp;lt; arr.length - 1; i++) { int min = i; // 每轮需要比较的次数 N-i  for (int j = i + 1; j &amp;lt; arr.length; j++) { if (arr[j] &amp;lt; arr[min]) { // 记录目前能找到的最小值元素的下标  min = j; } } // 将找到的最小值和i位置所在的值进行交换  if (i !</description>
    </item>
    
    <item>
      <title>面试过程</title>
      <link>https://jiandar.github.io/docs/private/employment/interview/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/private/employment/interview/interview/</guid>
      <description>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
interview.md</description>
    </item>
    
    <item>
      <title>项目经验</title>
      <link>https://jiandar.github.io/docs/private/p-info/project-exp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/private/p-info/project-exp/</guid>
      <description>项目经验#生命周期# 支撑产品、版本、单板的生命周期规划管理流程，发布产品、版本、单板的生命周期信息查询； 增加产品组合相关流程能力，产业销售目录维护、路标管理以及组合策略管理等功能特性；  华为告警处理系统# 时间：2018.05-2019.04 公司：华为技术有限公司   玉柴车联# 时间：2016.5-2017.6 公司：南宁市企凡信息技术有限公司 项目介绍：玉柴车联是为玉柴货车司机、厂商、运营商提供的运营服务管理平台 技术框架：Html、CSS、JQuery、spring、mybatis、springMvc 主要功能：  位置服务：车辆分组，车辆查询 财产无忧：客户管理，合同管理，借款还款管理，防拆管理，车辆控制，控制提醒 维修无忧：故障库，保养策略，保养历史，车辆故障 运管无忧：报警提醒，车辆报表导出 运营管理：车辆信息导入，终端号、SIM卡、车辆、车主管理 系统管理：角色权限，字典管理，用户管理    其他# 华为告警处理系统 企凡OA系统 五洲天美商城 玉柴车联 CATTC微信公众号  </description>
    </item>
    
    <item>
      <title>ConcurrentHashMap</title>
      <link>https://jiandar.github.io/docs/java/concurrency/container/ConcurrentHashMap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/container/ConcurrentHashMap/</guid>
      <description>ConcurrentHashMap#ConcurrentHashMap</description>
    </item>
    
    <item>
      <title>HashTable</title>
      <link>https://jiandar.github.io/docs/java/container/Map/HashTable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/container/Map/HashTable/</guid>
      <description>HashTable#概述# 是一个哈希表，存储的是键值对 (key-value) 映射。 和 HashMap 很相似，不同的是，HashTable 是线程安全的  特点#   键 不允许为null，不允许重复     值 不允许为null，允许重复   顺序 无序   多线程 线程安全    继承关系#public class Hashtable&amp;lt;K,V&amp;gt; extends Dictionary&amp;lt;K,V&amp;gt; implements Map&amp;lt;K,V&amp;gt;, Cloneable, java.io.Serializable    Dictionary、Map接口 提供了键值对的骨干功能     Cloneable接口 支持克隆   Serializable接口 支持序列化    成员变量#// 保存key-value的数组。 private transient Entry&amp;lt;?</description>
    </item>
    
    <item>
      <title>LinkedHashSet</title>
      <link>https://jiandar.github.io/docs/java/container/Set/LinkedHashSet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/container/Set/LinkedHashSet/</guid>
      <description>LinkedHashSet#概述# LinkedHashSet 基于 LinkedHashMap 实现，是 HashSet 的一个扩展版本  特点#   顺序 有序     元素 允许为 null，不允许重复   多线程 线程不安全    继承关系#public class LinkedHashSet&amp;lt;E&amp;gt; extends HashSet&amp;lt;E&amp;gt; implements Set&amp;lt;E&amp;gt;, Cloneable, java.io.Serializable    HashSet、Set接口 提供了 Set 接口的骨干功能     Cloneable接口 支持克隆   Serializable接口 支持序列化    构造方法#// 默认 public LinkedHashSet() { super(16, .</description>
    </item>
    
    <item>
      <title>LinkedList</title>
      <link>https://jiandar.github.io/docs/java/container/List/LinkedList/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/container/List/LinkedList/</guid>
      <description>LinkedList#概述# 是一种双向链表  特点#   顺序 有序     元素 允许为 null，允许重复   效率 查询慢，增删快   多线程 线程不安全    继承关系#public class LinkedList&amp;lt;E&amp;gt; extends AbstractSequentialList&amp;lt;E&amp;gt; implements List&amp;lt;E&amp;gt;, Deque&amp;lt;E&amp;gt;, Cloneable, java.io.Serializable    AbstractSequentialList、List接口 提供了列表的骨干功能     Deque接口 提供了双端队列的骨干功能   Cloneable接口 支持克隆   Serializable接口 支持序列化    成员变量#// 元素的个数 transient int size = 0; // 头节点 transient Node&amp;lt;E&amp;gt; first; // 尾节点 transient Node&amp;lt;E&amp;gt; last; // 节点（内部类） private static class Node&amp;lt;E&amp;gt; { E item; Node&amp;lt;E&amp;gt; next; Node&amp;lt;E&amp;gt; prev; Node(Node&amp;lt;E&amp;gt; prev, E element, Node&amp;lt;E&amp;gt; next) { this.</description>
    </item>
    
    <item>
      <title>ReentrantLock</title>
      <link>https://jiandar.github.io/docs/java/concurrency/lock/ReentrantLock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/lock/ReentrantLock/</guid>
      <description>ReentrantLock#</description>
    </item>
    
    <item>
      <title>Semaphore</title>
      <link>https://jiandar.github.io/docs/java/concurrency/tool/Semaphore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/tool/Semaphore/</guid>
      <description>Semaphore#功能# 信号灯 作为一种流量控制手段，用于控制同时访问特定资源的线程数量，保证合理的使用共享资源。  原理# Semaphore 管理一系列许可（仅维护许可的计数）。 线程通过 acquire() 获取许可。当没有可用的许可的时候，线程阻塞，直到有可用的许可为止。 线程通过 release() 释放许可。  方法#// 构造方法：设定许可数量 public Semaphore(int permits) // 构造方法：设定许可数量，公平/非公平模式 public Semaphore(int permits, boolean fair) // 获取许可 public void acquire() // 释放许可 public void release() // 获取剩余许可数量 public int drainPermits() 示例#// 抢车位 public class Test { public static void main(String[] args) { // 模拟3个停车位  Semaphore semaphore = new Semaphore(3); // 模拟6部汽车  for (int i = 1; i &amp;lt;= 6; i++) { new Thread(() -&amp;gt; { try { String thread = Thread.</description>
    </item>
    
    <item>
      <title>TCP/IP</title>
      <link>https://jiandar.github.io/docs/computer/tcp-ip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/computer/tcp-ip/</guid>
      <description>TCP/IP 协议#概述# Transmission Control Protocol / Internet Protocol，传输控制协议/网际协议 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准，是一系列互联网通信协议的统称 包括TCP，UDP，IP，HTTP，FTP，SMTP等协议，因TCP和IP最具代表性，所以被称为TCP/IP协议  TCP 协议# Transmission Control Protocol，传输控制协议 是面向连接的协议，在收发数据前，必须和对方建立可靠的连接。 一个TCP连接必须有三次握手、四次挥手  报文首部#   字段 描述 说明     序号，seq 报文序号    确认号，ask 期望的报文序号    URG 紧急 当URG=1时，表明报文段有紧急数据，应当尽快传送。   ACK 确认 当ACK=1时，上面的确认号才管用。   PSH  当PSH=1时，接收端应当将缓冲区中的数据尽快交付上层。   RST  当RST=1时，表示TCP连接出现严重差错，必须释放连接，再重新建立连接。   SYN 同步 当SYN=1时，表示请求建立连接。   FIN 终止 当FIN=1时，表示要求释放连接。    建立连接：三次握手#  三次握手（Three-way Handshake），是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包</description>
    </item>
    
    <item>
      <title>volatile</title>
      <link>https://jiandar.github.io/docs/java/concurrency/theory/volatile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/theory/volatile/</guid>
      <description>volatile#概述# volatile：是一种比sychronized关键字更轻量级的同步机制，用来确保将变量的更新操作通知到其他线程。 保证所修饰变量对所有的线程的可见性 禁止指令重排优化 不保证原子性  实现原理# 对于volatile所修饰变量的写操作，在生成汇编代码时，会增加Lock前缀指令 缓存一致性：每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期  内存语义# 写volatile变量会重新刷新到主内存中，其他线程读volatile变量，会重新从主内存中读取新值  内存语义的实现# 在生成字节码时，编译器会在指令序列中插入内存屏障，来禁止特定类型的处理器重排序     StoreStore屏障 禁止上面的普通写和下面的volatile写重排序     StoreLoad屏障 防止上面的volatile写与下面可能有的volatile读/写重排序   LoadLoad屏障 禁止下面所有的普通读操作和上面的volatile读重排序   LoadStore屏障 禁止下面所有的普通写操作和上面的volatile读重排序    解决：不保证原子性# 解决办法：使用 synchronized 修饰、使用 AtomicInteger 类型  public class Singleton { //volatile：禁止指令重排  private static volatile Singleton instance = null; private Singleton() { } // 双重检测机制  public static Singleton getInstance() { if (instance == null) { synchronized (Singleton.</description>
    </item>
    
    <item>
      <title>函数式接口</title>
      <link>https://jiandar.github.io/docs/java/basic-feature/Java8/functional-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-feature/Java8/functional-interface/</guid>
      <description>函数式接口#概述# Functional Interface 就是一个有且仅有一个抽象方法，但可以有多个非抽象方法的接口 可以被隐式转换为 lambda 表达式，使用 @FunctionalInterface 进行检测  // JDK 1.8 之前已有的常用函数式接口 @FunctionalInterface public interface Runnable { void run(); } @FunctionalInterface public interface Callable&amp;lt;V&amp;gt; { V call() throws Exception; } @FunctionalInterface public interface Comparator&amp;lt;T&amp;gt; { int compare(T var1, T var2); } java.util.function#Consumer# 消费型 接受数据，没有返回值  // 消费一个数据 public interface Consumer&amp;lt;T&amp;gt; { void accept(T t); } // 消费两个数据 public interface BiConsumer&amp;lt;T, U&amp;gt; { void accept(T t, U u); }    接口 函数     IntConsumer void accept(int value);   LongConsumer void accept(long value);   DoubleConsumer void accept(double value);   ObjIntConsumer&amp;lt;T&amp;gt; void accept(T t, int value);   ObjLongConsumer&amp;lt;T&amp;gt; void accept(T t, long value);   ObjDoubleConsumer&amp;lt;T&amp;gt; void accept(T t, double value);    Supplier# 供给型 无需接受数据，返回一个结果  // 无参数，返回一个结果 public interface Supplier&amp;lt;T&amp;gt; { T get(); }    接口 函数     IntSupplier int getAsInt();   LongSupplier long getAsLong();   DoubleSupplier double getAsDouble();   BooleanSupplier boolean getAsBoolean();    Predicate# 断言型 接受一个数据，返回布尔值  // 接受一个数据，返回布尔值 public interface Predicate&amp;lt;T&amp;gt; { boolean test(T t); } // 接受两个数据，返回布尔值 public interface BiPredicate&amp;lt;T, U&amp;gt; { boolean test(T t, U u); }    接口 函数     IntPredicate boolean test(int value);   LongPredicate boolean test(long value);   DoublePredicate boolean test(double value);    Function# 函数型 接受数据，返回一个值  // 接受一个数据，返回一个结果 public interface Function&amp;lt;T, R&amp;gt; { R apply(T t); } // 接受两个数据，返回一个结果 public interface BiFunction&amp;lt;T, U, R&amp;gt; { R apply(T t, U u); }    接口 函数     IntFunction&amp;lt;R&amp;gt; R apply(int value);   LongFunction&amp;lt;R&amp;gt; R apply(long value);   DoubleFunction&amp;lt;R&amp;gt; R apply(double value);       ToIntBiFunction&amp;lt;T, U&amp;gt; int applyAsInt(T t, U u);   ToIntFunction&amp;lt;T&amp;gt; int applyAsInt(T value);   LongToIntFunction int applyAsInt(long value);   DoubleToIntFunction int applyAsInt(double value);       ToLongBiFunction&amp;lt;T, U&amp;gt; long applyAsLong(T t, U u);   ToLongFunction&amp;lt;T&amp;gt; long applyAsLong(T value);   IntToLongFunction long applyAsLong(int value);   DoubleToLongFunction long applyAsLong(double value);       ToDoubleBiFunction&amp;lt;T, U&amp;gt; double applyAsDouble(T t, U u);   ToDoubleFunction&amp;lt;T&amp;gt; double applyAsDouble(T value);   IntToDoubleFunction double applyAsDouble(int value);   LongToDoubleFunction double applyAsDouble(long value);    Operator# 操作同类型数据     接口 函数     UnaryOperator&amp;lt;T&amp;gt; T apply(T t);   IntUnaryOperator int applyAsInt(int operand);   LongUnaryOperator long applyAsLong(long operand);   DoubleUnaryOperator double applyAsDouble(double operand);       BinaryOperator&amp;lt;T&amp;gt; T apply(T t1, T t2);   IntBinaryOperator int applyAsInt(int left, int right);   LongBinaryOperator long applyAsLong(long left, long right);   DoubleBinaryOperator double applyAsDouble(double left, double right);    </description>
    </item>
    
    <item>
      <title>列属性</title>
      <link>https://jiandar.github.io/docs/database/mysql/basic/column-attribute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/database/mysql/basic/column-attribute/</guid>
      <description>列属性#null、notnull# 数据列是否允许NULL值。 在设计表的时候，尽量不要让数据为空。  default# 默认值。 如果没有数据插入，以默认值进行填充，通常是null。  comment# 列的注释说明。  unsigned# 数值型数据，无符号  zerofill# 当存储的数值型数据未达到显示长度时，在左侧补0，适用于正数数值  auto_increment#  自动递增，适用于整数类型
-- 查询自动递增变量 show variables like &amp;#39;auto_increment%&amp;#39;; -- 修改步长 alter table tableName auto_increment= 2;   primary key#  主键，在一张表中，有且只有一个主键。
  不能为空，且具有唯一性。
-- 修改 alter table tableName add primary key(fieldName); -- 删除 alter table tableName drop primary key;   foreign key# 外键，表示两表间的关系。 一般不设外键，影响数据库效率，外键关系一般由业务来实现。  unique#  唯一键，在不为空的情况下，不允许重复。</description>
    </item>
    
    <item>
      <title>列表标签</title>
      <link>https://jiandar.github.io/docs/dev-lang/html/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/html/list/</guid>
      <description>列表标签#   标签 说明     &amp;lt;ul&amp;gt; 定义一个无序列表（属性type：disc、square、circle）   &amp;lt;ol&amp;gt; 定义一个有序列表（属性type：1、a、A、ⅰ、Ⅰ）   &amp;lt;li&amp;gt; 定义一个列表项       &amp;lt;dl&amp;gt; 定义一个定义列表   &amp;lt;dt&amp;gt; 定义一个定义列表项   &amp;lt;dd&amp;gt; 定义一个定义列表项描述    &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Coffee&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Milk&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt;Coffee&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Milk&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;dl&amp;gt; &amp;lt;dt&amp;gt;Coffee&amp;lt;/dt&amp;gt; &amp;lt;dd&amp;gt;Black hot drink&amp;lt;/dd&amp;gt; &amp;lt;dt&amp;gt;Milk&amp;lt;/dt&amp;gt; &amp;lt;dd&amp;gt;White cold drink&amp;lt;/dd&amp;gt; &amp;lt;/dl&amp;gt; </description>
    </item>
    
    <item>
      <title>列表样式</title>
      <link>https://jiandar.github.io/docs/dev-lang/css/style/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/css/style/list/</guid>
      <description>列表样式#属性属性说明属性值属性值说明list-style简写属性&amp;nbsp;空格分隔各值，不分顺序list-style-image列表项标志的图片none无图片，默认URL图片路径list-style-position列表项标志的位置outside标记在文本外，文本与文本对齐。默认inside标记在文本内，文本与标记对齐list-style-type列表项标志的类型none无标记disc实心圆，默认circle空心圆square实心方块decimal数字lower-alpha小写英文字母(a、b、c、...)upper-alpha大写英文字母(A、B、C、...)lower-roman小写罗马数字(i、ii、iii、.</description>
    </item>
    
    <item>
      <title>反射机制</title>
      <link>https://jiandar.github.io/docs/java/basic-feature/Java/reflection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-feature/Java/reflection/</guid>
      <description>反射机制#概述# 是一种动态获取程序信息以及动态调用对象的功能 是Java被视为动态语言的关键  功用# 在运行时，判断任意一个类所具有的成员变量和方法 在运行时，判断任意一个对象所属的类 在运行时，调用任意一个对象的方法 在运行时，构造任意一个类的对象 在运行时，获取泛型信息 在运行时，处理注解 生成动态代理  反射API# java.lang.Class：代表一个类 java.lang.reflect.Field：代表类的成员变量 java.lang.reflect.Method：代表类的方法 java.lang.reflect.Constructor：代表类的构造器 java.lang.reflect.Array：提供了动态创建和访问 Java 数组的方法  java.lang.Class#  获取 Class 实例
// 1 通过类属性 Class clazz1 = Person.class; // 2 通过实例对象 Person person = new Person(); Class clazz2 = person.getClass(); // 3 通过类名（常用） Class clazz3 = Class.forName(&amp;#34;com.test.Person&amp;#34;); // 4 通过了类加载器（不常用） ClassLoader classLoader = Test.</description>
    </item>
    
    <item>
      <title>回收算法</title>
      <link>https://jiandar.github.io/docs/java/jvm/gc/collect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/jvm/gc/collect/</guid>
      <description>回收算法#标记 - 清除（Mark-Sweep）#  原理：
 标记：扫描内存空间，对存活的对象进行标记 清除：扫描内存空间，回收未标记的对象。    缺点：
 两次扫描，效率低 会产生内存碎片    标记 - 整理（Mark-Compact）#  原理：
 标记：扫描内存空间，对存活的对象进行标记 压缩：再次扫描，并整理存活的对象    优缺点：
 没有内存碎片 移动对象需要成本    复制算法（Copying）#  原理：
 从 From 区找到存活的对象，复制到 To 区。 From、To区交互身份，进行下一轮垃圾收集。    优缺点：
 没有标记清除过程，效率高。 没有内存碎片，能进行快速内存分配 可用内存被压缩到了原来的一半，内存利用率较低    分代收集# 原理：  根据对象的生命周期的不同将内存划分为几块，然后根据各块的特点采用最适当的收集算法 对于新生代（大批对象死去、只有少量对象存活），一般使用复制算法 对于老年代（对象存活率高、没有额外空间进行分配担保），一般使用标记-整理算法    分区收集# 原理：将整个堆空间划分为连续的不同小区间，每个小区间独立使用，独立回收。 优点：可以控制一次回收多少个小区间，根据目标停顿时间，每次合理地回收若干个小区间(而不是整个堆)，从而减少一次GC所产生的停顿。  </description>
    </item>
    
    <item>
      <title>基本命令</title>
      <link>https://jiandar.github.io/docs/dev-tool/tools/git/basic-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-tool/tools/git/basic-command/</guid>
      <description>基本命令#基本操作#创建仓库#git init## 初始化本地库 # git init [dir] $ git init git clone## 从现有库中拷贝项目 # git clone &amp;lt;repository&amp;gt; &amp;lt;dir&amp;gt; $ git clone git://github.com/schacon/grit.git myDir 变更修改#git add## 添加文件/文件夹到暂存区 # git add [file1] [file2] ... $ git add README hello.php # 格式：git add [dir] $ git add . git rm## 删除工作区和暂存区的文件 # git rm &amp;lt;file&amp;gt; $ git rm runoob.</description>
    </item>
    
    <item>
      <title>守护线程</title>
      <link>https://jiandar.github.io/docs/java/concurrency/thread/thread-daemon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/thread/thread-daemon/</guid>
      <description>守护线程#概述# 在Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程) 守护线程的作用是为其他线程的运行提供便利服务 守护线程最典型的应用就是 GC (垃圾回收器)  创建守护线程# 不能把正在运行的常规线程设置为守护线程，必须在线程启动前设置为守护线程，否则会抛异常。 在Daemon线程中产生的新线程也是Daemon的。 不要认为所有的应用都可以分配给Daemon来进行服务，比如读写操作或者计算逻辑。  Thread daemonTread = new Thread(); // 设定 daemonThread 为 守护线程，default false(非守护线程) daemonThread.setDaemon(true); // 验证当前线程是否为守护线程，返回 true 则为守护线程 daemonThread.isDaemon(); 为什么要用守护线程？# 在JVM实例中，如果存在任何一个未结束的非守护线程，守护线程就全部工作 当非守护线程全部结束后，则JVM 进程即会退出，守护线程会随着JVM一同结束工作 守护线程拥有自动结束自己生命周期的特性，而非守护线程不具备这个特点  </description>
    </item>
    
    <item>
      <title>定位</title>
      <link>https://jiandar.github.io/docs/dev-lang/css/position/position/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/css/position/position/</guid>
      <description>定位#属性属性说明属性值属性值说明position定位static没有定位，默认值fixed绝对定位，相对于浏览器窗口，脱离标准流absolute绝对定位，相对于父元素，脱离标准流relative相对定位，相对于自身正常位置inherit继承z-index层级auto与父元素相等，默认number层级数值inherit继承top&amp;nbsp;
bottom&amp;nbsp;
left&amp;nbsp;
right上下左右auto浏览器计算，默认size数值inherit继承</description>
    </item>
    
    <item>
      <title>插入排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/insertion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/insertion/</guid>
      <description>插入排序#算法步骤# 将第一个元素看做一个有序序列，把其余元素当成是未排序序列。 从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。 类似扑克牌  动图演示#代码实现#public class InsertSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { // 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的  for (int i = 1; i &amp;lt; arr.length; i++) { // 记录要插入的数据  int tmp = arr[i]; // 从已经排序的序列最右边的开始比较，找到比其小的数  int j = i; while (j &amp;gt; 0 &amp;amp;&amp;amp; tmp &amp;lt; arr[j - 1]) { arr[j] = arr[j - 1]; j--; } // 存在比其小的数，插入  if (j !</description>
    </item>
    
    <item>
      <title>流程控制</title>
      <link>https://jiandar.github.io/docs/java/basic-grammar/process-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-grammar/process-control/</guid>
      <description>流程控制#if#// 格式 if (布尔表达式){ // 如果true,执行... } else { // 如果false,执行... } //示例 int i = 30; if (i &amp;lt; 20) { System.out.print(&amp;#34;true&amp;#34;); } else { System.out.print(&amp;#34;false&amp;#34;); } for#// 格式 for (初始化; 布尔表达式; 步进) { // 循环内容 } // 增强 for 循环 for (变量类型 变量 : 数组或集合){ // 循环内容 } // 示例 for (int i = 0; i &amp;lt; 10; i++) { System.</description>
    </item>
    
    <item>
      <title>线程池 - 操作</title>
      <link>https://jiandar.github.io/docs/java/concurrency/threadpool/threadpool-operate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/threadpool/threadpool-operate/</guid>
      <description>线程池操作#ExecutorService#   方法 描述     execute() 向线程池提交新任务，无返回值   submit() 向线程池提交新任务，返回 Future   shutdown() 1、停止接收新任务2、线程池中，已经提交的任务会继续执行，执行完毕后关闭线程池   shutdownNow() 1、停止接收新任务2、试图关闭正在执行的任务3、移除线程池队列中等待执行的任务   isShutdown() 线程池是否关闭   isTerminated() 判断线程池关闭后所有的任务是否都执行完了仅当 shutdown()/shutdownNow() 被调用后才有效   awaitTermination() 阻塞，直到以下情况出现：1、超时；2、当前线程中断；3、所有任务已经执行完成    创建线程池#  使用 ThreaPoolExecutor 构造函数，创建线程池，参数自定义
public class MyRunnable implements Runnable { @Override public void run() { System.out.println(Thread.currentThread().getName() + &amp;#34; is running.</description>
    </item>
    
    <item>
      <title>继承</title>
      <link>https://jiandar.github.io/docs/java/oop/Inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/oop/Inheritance/</guid>
      <description>继承#继承# 指继承父类的状态和行为，创建子类的过程。 不支持多继承。  特性# 子类拥有父类非 private 的属性、方法 子类可以对父类进行扩展 子类可以重写父类方法 支持单继承、多重继承 提高类之间的耦合性  格式#class 父类 { //... } class 子类 extends 父类 { //... } this &amp;amp; super#   this 指向自己的引用 this() 调用自己的构造方法     super 指向父类的引用 super() 调用父类的构造方法    class Animal { public void eat() { System.out.println(&amp;#34;animal : eat&amp;#34;); } } class Dog extends Animal { public void eat() { System.</description>
    </item>
    
    <item>
      <title>薪资待遇</title>
      <link>https://jiandar.github.io/docs/private/employment/interview/salary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/private/employment/interview/salary/</guid>
      <description>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
salary.md</description>
    </item>
    
    <item>
      <title>触发器</title>
      <link>https://jiandar.github.io/docs/database/mysql/advanced-feature/trigger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/database/mysql/advanced-feature/trigger/</guid>
      <description>触发器#定义# 触发器是一种特殊类型的存储过程，通过触发事件而被执行。 优点：  实现相关表的级联更改。 通过触发器进行安全校验，保证数据安全   缺点：  过分依赖触发器，会影响数据库结构，增加了维护难度。 由于执行触发器不可见，很难弄清数据库层情况 对数据库服务器资源的开销较大   建议：  尽量不使用触发器 如果要使用，需确保触发器高效低耗    触发器管理# 触发时机：before/after 触发事件：insert/update/delete  # 创建修改语句结束符create trigger 触发器名 触发时机 触发事件 on 表名 for each rowbegin执行体end 语句结束符修改语句结束符# 查看show triggers [like &amp;#39;...&amp;#39;];show create trigger 触发器名;# 删除drop trigger 触发器名;-- 示例 DELIMITER $$ CREATE TRIGGER demo BEFORE DELETE ON users FOR EACH ROW BEGIN INSERT INTO logs VALUES(NOW()); INSERT INTO logs VALUES(NOW()); END $$ DELIMITER ; 触发器新旧数据# 触发器，针对数据表中的每一行，会记录其操作前后的数据  -- 在触发器中，可通过“old/new.</description>
    </item>
    
    <item>
      <title>CopyOnWriteArrayList</title>
      <link>https://jiandar.github.io/docs/java/concurrency/container/CopyOnWriteArrayList/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/container/CopyOnWriteArrayList/</guid>
      <description>CopyOnWriteArrayList#设计思想# Copy-On-Write（COW），是一种读写分离的思想 写线程写入数据的时候，会复制新建一个新容器。当数据更新完成后，再将旧容器引用指向新容器。 读线程感知数据更新是延时的，牺牲了数据实时性而保证数据最终一致性。 由于写线程写数据是在新容器写入的，因此读线程不会被阻塞。  应用场景# 适用于读多写少的场景，比如系统的黑名单白名单设置  代码实现# array  private transient volatile Object[] array;  get  public E get(int index) { return get(getArray(), index); } final Object[] getArray() { return array; } private E get(Object[] a, int index) { return (E) a[index]; }  add  public boolean add(E e) { final ReentrantLock lock = this.</description>
    </item>
    
    <item>
      <title>CSS 选择器</title>
      <link>https://jiandar.github.io/docs/dev-lang/css/selector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/css/selector/</guid>
      <description>CSS 选择器#基础选择器#   选择器 说明 CSS 示例 所选择的 HTML     标签选择器 以 标签名 来定义 p {...} &amp;lt;p&amp;gt;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;..&amp;lt;/p&amp;gt;   ID选择器 以 #  来定义 #p1 {...} &amp;lt;p id=&amp;ldquo;p1&amp;rdquo;&amp;gt;&amp;hellip;&amp;hellip;&amp;lt;/p&amp;gt;   类选择器 以 . 来定义 .c1 {...} &amp;lt;p class=&amp;ldquo;c1&amp;rdquo;&amp;gt;&amp;hellip;&amp;lt;/p&amp;gt;    派生选择器#   选择器 说明 CSS 示例     全局选择器 通配符，* *{...}   组合选择器 多个选择器，用逗号分隔 div,p{.</description>
    </item>
    
    <item>
      <title>Exchanger</title>
      <link>https://jiandar.github.io/docs/java/concurrency/tool/Exchanger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/tool/Exchanger/</guid>
      <description>Exchanger#功能# 交换器 是一个用于线程间协作的工具类，用于两个线程间交换数据。  原理# Exchanger提供了一个交换的同步点，在这个同步点两个线程能够交换数据。 如果一个线程先执行exchange()，那它会阻塞等待另一个线程也执行 exchange()。 当两个线程就都达到了同步点，它们就可以交换数据。  方法#// 构造方法 public Exchanger() // 交换 public V exchange(V x) // 交换（超时限制） public V exchange(V x, long timeout, TimeUnit unit) 示例#public class Test { public static void main(String[] args) { Exchanger&amp;lt;String&amp;gt; exchanger = new Exchanger&amp;lt;&amp;gt;(); new Thread(() -&amp;gt; { try { String out=&amp;#34;20块钱&amp;#34;; String in = exchanger.</description>
    </item>
    
    <item>
      <title>final</title>
      <link>https://jiandar.github.io/docs/java/concurrency/theory/final/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/theory/final/</guid>
      <description>final#概述# final，即最终、不可变 可以用来修饰类、方法和变量  用法#  修饰类
 final 修饰的类，不能被继承 final 类中的方法，都会被隐式地指定为 final 方法  ​
  修饰方法
 final 修饰的方法，不能被重写，但可以被重载 private 修饰的方法，都会隐式地指定为 final 方法  ​
  修饰变量
 final 修饰的变量，在初始化后，不能被修改 final 变量，如果是引用类型，引用不能再指向其他对象，但对象内容是可以修改的    重排序规则#  编译器和处理器要遵守两个重排序规则：
 在构造函数内对 final 域的写入，与随后把此被构造对象的引用赋值给一个变量，这两个操作之间不能重排序 初次读一个包含 final 域的对象的引用，与随后初次读这个 final 域，这两个操作之间不能重排序    通俗理解就是：
 对象构造函数内有final域，必须先用构造函数构造对象，再把对象赋给其他引用 如果对象有final域，必须先读对象的引用，再读final域    </description>
    </item>
    
    <item>
      <title>Git 使用</title>
      <link>https://jiandar.github.io/docs/dev-tool/tools/git/git-operate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-tool/tools/git/git-operate/</guid>
      <description>Git 使用#GitHub#免密提交#  生成 SSH Key 文件
$ ssh-keygen -t rsa -C &amp;#34;youremail@example.com&amp;#34;   打开 ~/.ssh/id_rsa.pub，复制里面的 key
  回到 github 上，进入Settings，选择 SSH and GPG keys，点击 New SSH key，设置标题，粘贴 key
  验证
$ ssh -T git@github.com Hi origin! You&amp;#39;ve successfully authenticated, but GitHub does not provide shell access.   TortoiseGit#与 GitHub 共用密码#  现象：TortoiseGit 不能共用ssh-keygen产生的密钥</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://jiandar.github.io/docs/computer/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/computer/http/</guid>
      <description>HTTP 协议#概述# Hyper Text Transfer Protocol，超文本传输协议，是互联网上应用最为广泛的一种网络通信协议 用于将超文本标记语言（HTML）文档从Web服务器传送到本地浏览器 基于客户端/服务端（C/S）模型，将浏览器为客户端，通过URL向服务端发送所有请求    工作过程  客户与服务器建立连接 客户向服务器提出请求 服务器接受请求，并根据请求返回相应的文件作为应答 客户与服务器关闭连接      注意事项  HTTP 的默认端口号为80 HTTP 是无连接的，每次连接只处理一个请求 HTTP 是媒体独立的，可以发送任何类型的数据 HTTP 是无状态的，对于事务处理没有记忆能力    报文格式#请求方式#   请求方式 含义     GET 返回请求路径所对应的资源。   HEAD 不需要返回资源，仅返回响应行和响应头即可。   POST 向请求路径提交数据，创建新的资源。   PUT 更新请求路径所对应的资源。   PATCH 更新请求路径所对应的部分资源。   DELETE 删除请求路径所对应的资源。   OPTIONS 获取请求路径对应资源的信息（是否可可跨域获取，可以支持哪些请求方式等）。   TRACE 直接返回请求，主要用于测试。    状态码# HTTP Status Code，当浏览器发送请求后，服务器会返回一个包含HTTP状态码的消息头，以响应浏览器的请求 其他状态码可查询 &amp;ndash;&amp;gt; 链接 常见状态码  200 - 请求成功 301 - 资源（网页等）被永久转移到其它URL 404 - 请求的资源（网页等）不存在 500 - 内部服务器错误       状态码 含义 描述     1** 信息 服务器收到请求，需要请求者继续执行操作   2** 成功 操作被成功接收并处理   3** 重定向 需要进一步的操作以完成请求   4** 客户端错误 请求包含语法错误或无法完成请求   5** 服务器错误 服务器在处理请求的过程中发生了错误    其他#端口# 用于标识进程的逻辑地址，是一个数字标识 有效端口：0～65535，其中0～1024系统使用或保留端口  响应头#   响应头 说明     Allow 服务器支持哪些请求方法（如GET、POST等）。   Content-Encoding 文档的编码（Encode）方法。   Content-Length 表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。   Content-Type 表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。   Date 当前的GMT时间。   Expires 应该在什么时候认为文档已经过期，从而不再缓存它？   Last-Modified 文档的最后改动时间。   Location 表示客户应当到哪里去提取文档。   Refresh 表示浏览器应该在多少时间之后刷新文档，以秒计。   Server 服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。   Set-Cookie 设置和页面关联的Cookie。   WWW-Authenticate 客户应该在Authorization头中提供什么类型的授权信息？    内容类型# Content-Type，用于定义网络文件的类型和网页的编码     类型 描述 类型 描述     text/html HTML格式 application/xhtml+xml XHTML格式   text/plain 纯文本格式 application/xml XML数据格式   text/xml XML格式 application/json JSON数据格式   image/gif gif图片格式 application/pdf pdf格式   image/jpeg jpg图片格式 application/msword Word文档格式   image/png png图片格式 application/octet-stream 二进制流数据   multipart/form-data 表单文件上传 application/x-www-form-urlencoded 表单key/value格式    HTTPS# Hypertext Transfer Protocol Secure，超文本传输安全协议 是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议 主要作用：数据保密性、数据完整性、身份校验安全性 默认端口：443  工作原理#HTTPS 优点# 使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器； HTTPS要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。 HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。 谷歌曾称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。  HTTPS 缺点# HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电； HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响； SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。 SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。 HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。  Socket# 套接字，网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket  TCP 示例# 服务端  // 监听指定端口 ServerSocket server = new ServerSocket(6666); // 接受连接 Socket socket = server.</description>
    </item>
    
    <item>
      <title>Java8 Stream</title>
      <link>https://jiandar.github.io/docs/java/basic-feature/Java8/stream-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-feature/Java8/stream-api/</guid>
      <description>Java8 流#Stream# 是一个来自数据源的元素队列，并支持聚合操作  元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。 数据源流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。 聚合操作类似 SQL 语句一样的操作， 比如 filter, map, reduce, find, match, sorted 等   基础特征  管道：中间操作都会返回流对象本身 内部迭代：通过访问者模式实现    创建流#String[] array = {&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;}; Path pathObj = Paths.get(&amp;#34;filePath&amp;#34;); Collection&amp;lt;String&amp;gt; collection = Lists.newArrayList(); SecureRandom random = SecureRandom.getInstanceStrong(); // 序列 Stream.of(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;); // 数组 Arrays.stream(array); // 集合 collection.stream(); // 文件 Files.</description>
    </item>
    
    <item>
      <title>LinkedHashMap</title>
      <link>https://jiandar.github.io/docs/java/container/Map/LinkedHashMap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/container/Map/LinkedHashMap/</guid>
      <description>LinkedHashMap#概述# LinkedHashMap 是 HashMap 的子类，可以认为是等同于 HashMap+LinkedList，哈希表+双向链表  特点#   键 允许为null（放在第一位），不允许重复     值 允许为null，允许重复   顺序 有序   多线程 线程不安全    继承关系#public class LinkedHashMap&amp;lt;K,V&amp;gt; extends HashMap&amp;lt;K,V&amp;gt; implements Map&amp;lt;K,V&amp;gt; 成员变量#// 控制访问顺序：false：基于插入顺序；true：基于访问顺序 final boolean accessOrder; // 其他变量从HashMap中继承 构造方法#// 默认 public LinkedHashMap() { super(); accessOrder = false; } // 指定初始容量 public LinkedHashMap(int initialCapacity) { super(initialCapacity); accessOrder = false; } // 指定初始容量、负载因子 public LinkedHashMap(int initialCapacity, float loadFactor) { super(initialCapacity, loadFactor); accessOrder = false; } // 指定初始容量、负载因子、accessOrder public LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder) { super(initialCapacity, loadFactor); this.</description>
    </item>
    
    <item>
      <title>offer</title>
      <link>https://jiandar.github.io/docs/private/employment/offer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/private/employment/offer/</guid>
      <description>hZkxxXQy/9Nkn89QklXdUZRkWfdw1kTWHYP6zN5GIdAZNnUxdVfFfmW0DDHKX/F2BZ76JDVLoSJHc5G3aceWVASk2I6huManTEajs0nWKkoJagDtN8Qu8w4vNV0OdcfoIFhHSC9bQ0gMXG7XWQyMBmQxQfsB2t2qYMZmX0feQjEwZ7E/YuzhD3lPX2wGw6gnG8+GNrP4WKIzBRJLDlANVCJfNJufLGVScsfVSfxDuGoZFEZGpEZCgzD78T/u5u0QC3zRIP8mCJ0QPH/nSAoiv0i7DL71jgN23KMaV7oyBrSQVTQOG3/TNl8j8z2bNUNhUDDdK4D0+xQtYvlIAN1j4wO5b5X30+nY4/EWZevsSQrIWh5LSXvt/wIrCnCsb0KEIyXUHndXKH9WS2YKAcV6uAk+dkRynfd+E/i26lEItgO5IN+rJar3s5SJIUdlFIQBdwKZ8/CMhl8eXwYxaLooXqVtUt+DiNHoKwQsS5PHViZMMFdRLe4VI+8s6SPfrmihQO+V9kz62UA2HaNsZ2STSXE+90TcLzTS6EM+x9RauvK7GQBDV2NKzVHBhptsbxJx/7TX3GU4jR3EaiLawdrNPw==
8TwFDKDOpDb3KrYbbcB6qZ0Zi++uNODcRFC0zDTlNWVKFskRsOwa92PMQ2rwsxcCIQIQOvV03cpbK/DA+KeFbb5buqbmo93Vqii+RHzPeSzai/tmODi7M6QWgrnEsEmaRxql7YXZKge+Lmh759s4aLQ4pXmoI48VrFcYX3GY9VCXGRgfVRy1sYmVtqFMCd4VEQZKsilzLOt9dtnCFzrg7ymXldNqZo/9u1kPyv21SSkGLSl54jklOH28w8zmFOIv+wPaDjG0u39v03ArM8lVjUyRo6E6mf3sCAjAgteeY4K3xVrPfbEAaRw+USM8IfLx8Y2lKQoIRiSVr/ovuE+I3oa7jZ3oG+dMgtxffdFuRvvR3gmMgle+TVALm5gPC49vRdroiOOWdWt72V8sAiZ69ObCA+qQjHVtcBXu0tLt3wRoPKhdOCq1M/hDmIOpm5foq6X6Xar9uwqM1zlxgLYwlVWuWgQ31DWGVjmfO4JLjITFazo3VCfNI/wqiwV2+bY/iYdO4zkSnwZlW901SSp8Ny/mM/2z8d+y43HXfzCo9IQC402XeJuzkt7GMG3ijn7j3bDfeUf1Sxw7vmz1+avNmPymgFEaizx01wWYdEK2qT146jSum+i7NFV2FDwtTj2PE0RUI0A4/+JqsyifysQjrlJDZ4/9wOgjKEf+qWvzaIx5CEM1Of1FRM7IQkw4J8LaNQMjTthxXdzDuyyHXvheLCZK64Vv/SrgqTrTkUCIKIbBMjAfvQP0Fqz/jc5KxPz6PHRbaJgCjA9eRBR0wdwVqvirIMRe7cXQ+qYkxT+PbsMasmvcH3Yr2k6w5BFOU6NqtUSmLIk6xxYUD37gVDC2MgzAhwEphzOyPnudvmxzIY7I8I5cYipsNIhesvuBUNdg71e21AQ6ejYmLCTZ9pWANfUPQ/TvKs3W1vKQ2TDmZ2fwUZw+BKvyhkpkijNAoke2wWKvdyhO+O4BDPxPt8Q9E7mOqc+umK6Fsq525vyHSKxltlLoaoCRlAZNCTHczdJioG35E9DJTkQCFl2n3ywMVrGPj2g6EFmd/HJxApt+d/J7SsHu4SLHnDsQOp0XxV76ePGPESVoxzJW+iUTvUAYdulL6Th2B3XM0uCF6FAMLV/6VFx/d88R0tOBtgI8mmPluyt/FqPQ0UwQYBFLX/PfUOWewcUwZ8H6WLzW6sLhy300bohvFrc80oaDx/KZ8HpjI1lhiI5WptrVvrdOdBurh0Sjn8r3CcdhOKVw94r89HBRDk+0ehacOMeMepiMJEGmmj2NdhQMpa3dS057AzIO4p8pxQzAgATEbp1tTdFCctslr8bVg3fglQbUJRobQX7KLewyndpAihpnGD9A2Kkpa/LWGO4ZJ+ioYydFLP6EGlMEyRUb36JdkI0kmac2QVRc+9lVG5TEIU8c11KYCFVc5ADQeDInlSfAJN7tBBDgQQyKLG0Au0eMQoNZhOKuQBYC1BFkGT5ykBcFUXJN+TvN3W58fs+QX26f0lZN3NLw1G55FS9nAlsZP42FU7IUINdrriUmNUUgsRn5q8J2KIy3ahvQr+hK1JgnhU+RNjR4PnmwAApUD8TyUmximmnbW/RDa8I7KkbG98m1T/ThnNCBiCvAridsiTydtRHs9S20K977EvlOftXwO0DbvQ5gIOKpLIDZY9tztT7iqDOhmiJnf4SuP3o8KD61YPCvDnV3U+J0vwus66V+itj6awKBv3XQHWQKitER3v3ryI/RShjDhoq4PSc63IxF4IUf42iN8a9YcFZnkK/r/AV+FeO14dwlHodB5iw0YKWkQlo5V3qD8SBbfG0WT3VFyk4g7Tw3oX8aGTWWvOWJ8a1so7HmRgubks9IWUoiZiDGl+wwjXHMDhfQTCCRW+lta7mii8xHHqydR9T1W8psjzprNILJMmNgNCdiOlfbnqKYYO/15DJoRupBppyC00r+hSPmQv+ofT4vdvkJqwlmRGxZN0dyi/WzhHTvv9zHq9s5Nqc0jknsojohSEy7+G0UE1LksbK0P4P0kRe9PDC5U0rP9DcYMy4Gw8m7WZzJBBFjcIipFo9WPf1GhojBdFJHnHC4cADfFkWOyIovD96g3mAwWc9IZg0KaQ1HJoZThZVO3mFOxfJV1m5DE6On2E7P/9z8oLqPYAXECt5GUdBgjnc+d2IlDJQczYRpRkLnuJTcSLe9JO5nQ/ZqDN4YApaGCxU2ieDYQtOruRTzLKtqwsF7WdfUIQKfd0WfRPn5PsNHJUiu989+ogkW97CPfRKVYVNAriPxxKYGIej7OSbHqfZlPR41ki6iY4HoKre8Uiaa+BIn4wjMpsU/0AX45wTUBvG+5HLoNnEM4y7JynNxwmvzs9wdzGEJewBiVtobP/dKC9OlqqYNuc6w6XPxidLac5+P9G0UhZ+sEpW5DeXISTyQOwIFsZEgCzZdzmi+wh3j/+E6fgco82eIOSWqBopnfsDtlKOHUgVM+VOmTXbH7KdVpbpYgajT5vzgjIGRVfabgi/T4GF4eKj1CLC+b/FElmzmb96417lbF+EW3RCRsq758lgXs15BQF143jPqUunSPY73+YMOI0/Eb4LCRoQYx2eOlDyJv9Az5fp8Qtcv9N+SouGELqj1W/A7pQyu6/9X0NFZ//2w6f+iBa5A2gnu76N1nSfcNgLXNL+1lGeZtcTKykfpgYBgLeiezhbhqm+hB4PANOIS72cwpaCPzhSldljfOBIy1gCaNjroSBBOGKYEpOLmH1RMF7cJNb2BpmTmkSJVuSTA3dCwPVfOYiBrDxuk/oNvh9TjLnFij0lYvAv/GrOKR8B9RrF08J4aW68dq5EMmHdzyYjai0kQmoFSNWYT1NV4R7uKRoTLVbayrp1PKxdeC9vHIKtfBhTv8U4LtmYvBpAjOTuwg9lnkTtmUomwFQMC5twQScfAwET58r4d/Cn5wToU6vJBRiVq5uki+4ChUB9PylDO63RwAO03kW5aRInGnIJ+H8/qUykY30pQseV+xDxMwcM+vz0pWc/V16B9Y8Spq+QY4FFh4J1SeDIjX3vtY+TuLou71f9qkjniNiDfRjZb6vU+TFhpz4qLn3RFqweC5TiSA5OrKbDHh6TYRn8pWBJp8+LEG7xTEnPYugy2TX3izQxfJu2txZxBpuXLsJMDYVtT8jdJFCaD6YPG1w9Y2atXVzcRqkKlVDLvOeO6GdjNobM1N16TLMbdSezet1v7eCdrEJbY/4njpg14K60INoC2kkpBq8yr2R3GIRYiLicX+o1fEgdW1s/rVZtX8jzYL7+9xJd/zPwhRx4lVEX2I4rsTmBl7DtH3WBgCTdFRlwqT3eTU/XoxLkXxDIef6eL/sEHbSeb5dcINvr/SoaKEagWOzFSC3sO3PlaSijKnbqAyFjsfLu44pmxdar5ocUZ1W+5j2bfgcQvi1LEDuEWT3s97YhfXcZm0OUZ6y9wEstUSXDi2UIX4zwcpHiocORUOJSIfu6Bq2Ycorxm4xWLb+2G8cK3demikZOfALzVV3tMTo3br6vkSaYORzRIR4fbKI2ySW5bvwaogMOWq+gL24MDW1Xc/C1xN4T1NeWIYQTOC6DykgD5MXrr/mJG4xB45URzneI3fnjvZdjfnKux2U4v6SXjw9j+GDIug/WWB7sQR/xYpDH3uffaUBPcRF8/ObQCPqccSlb8vJzHE59oKppGXTKaRRy2R7cVFLIFM5mgEcofAXzGd2eB9niAghJ+OsL8+I3aI8094QNrtFhJ5Pu3YQOrR1iZM4ucvk1enozKUwOzp6tj9mQe7vcLrXXkWqZgesaHOXv4KlPBJ3v1uROzz+/qOnIU2TLrPPDdT+wJtQoUA7Z0J/Krkl/B62AlSMzxEuUOtgJG15oPe4dHuAMMNaJHh7PGEdYhav6yV6xauSPygFYnIxN926qaqZUv+I9RUbf6KH7Vij0OXMsOim00i4nXG5ZpHWMCt7RWfK61qfuYezw1YMjhg6X3b9YYRVShQ3rVotQVBkwJOmPaCqUa+gN2HPx67CJMG++2LlJmHrzZi7lYvsEavI6eUBRhr90vv7GbK/xCQqRvn0wEIwn8esWis1KbonPRgjzRZfaaY/7udBDmN906eIf9bu08utn2kZn595eBhh0hjwNA+tFrCJkmeyyIeCsWAmYjZ4LDgW9URFq3bU8p4vmx+6Luz8EsfVCuBQTbbRNubDJBAFTVIRb24Dn88osdDS86KPafgdunyQg8NFt/O1Fg2H/YX9QjJnqvh8xNVRS3MTPu3rqV2gCvAmzYr04SuVBeLJ5w0/adVwsMowS077sD31bKBRoxWYFjoiCG0PAoMrzSGpfTxlfKFTdFsHnbI6pHrHlLhNETh2zbF8+c67RcPbYH1K+KT8kWpEYI5062Cdnu2HL9DkGivqVsgKeYGGhPZHv/LPjrdDM0/yNXvHRAumY8ffFei3fKr0dqQcSsuji1RnwmBUjTh2AexYAwyYJh98ftOhIsxlfVNeHJF5tGNsIBSukVWBRZFLeXAjNttcoPbLFy9Vqne+sgCZjkMlzY/LToghU3/kmmUwiv9ZXUpJbBywGtmq83GPjPqbEY23Lg7mKoKey1GBVn4Sc9RMMSflrO7MB1YU9xQpqyk2/xejLg+QacHZah4VvNXPBB0/YPiBap8SRATLT7UUJY1kwRXAKRnqFszkpyYDe5YV+WRjQ2YyMt9PcZNP4rcXmCo/ajvdqDmdc2t5wQIKaqCIOvfUfz5rr+DU2a0Kww2bBy3mOfKNADJVomzB3lAzGv+Tuj2yZvuX7uGZ8XYpuax+9a4s/0KObbCH37E5Zl3jWeSdqFbI+K8LQrFT+9nSzV3CQfa9U3kiAlM6NenwTpNdl7xqd/DWeFiBPslVMMVpKfjvAB1mP7sTEngRhTQDUYyofOgJbTtExBOT1nKAAzSJxM/gvI9GFwNJA54gWxTcbWfc15iPP6geSDdQCUL1q+eIuGAOlRqNhz9ISwTqEuOyvetn0SNUu7MSVMFX/WJNfKQ6TXNICiKsg/ctZty96Riw3suNBrXs+gQ32VGNUHrNS4Q+69PvJ2Vqw+U+Is3DOHdcTYQXuOZUk09w5OV2tqRTCtatrU45bnq8xGGRLQUMyZImU6mSX18ZLTj72tTLWWESJl/CcBFZQAHzHCiL+6hQ5dyCr8cXaP2yZBdLc/Twrk5vg6LSWqSSeObRLTlk0nQ+ij3tgo0hf731JfDckE/T+kSDREOeNNoF3nEhypJ4oQckBqpqcW+4v0tIAw7F8om7jiAZ1QCGTYdfsAjaTL1VxIJVquJaX7a657lKmTXlkFPkYu89OHi+x/MXnyeFo9EtYz3KESkReC19iq0LfL+wCdJR0FWqMRfrxSXzzpKejxgA4rNbJpPZ0oeFzK9cKycLV9+00bxvLLofEVzbBr+OMtDlZwEneiTr2wQbJlRIcbCQtEKizYtvHh2XIY4mSBQ1yG4nZWfvJnB7c6MbBalhmGzWfIZQdmXmI0e2eBAqlkr85vfusjwHZSnxsVcbuJpnFOgNiAP+sfd2k9akOGXh/Iv2bKAc7IYJLkpKuv2jxyQSnSAQBzetLpP2Ret9NFqtE4RELH6SYu95yBMhgodKndb2R1czZd0pkR0nDRZccLR8ZwdqOm5CkWlaXADVaiN0b8xuzoU4WlxDuvBkuwnriuHKFKF9bl2xrNqLzDh80nQ4tP3dovWyOWtTg+NHnjtWL5pMXxM0MNZio/d1ermRXjeTrrrbgbTchtIKLoP0KEQXQtbC9GNuJZWLPNSdZXw4/qUMAsvqWAqzDKOUbqhYQ+JKn8NWczlXBgiK8Qte6Y/PEwIxUxerGDeOPzBI9MxMYOt5Ilc0rH432Xdv10EqROOKHZQGJzGdXG+K8NJeA3R+Tg+GRieBBHV9sfJRjYpsP8dvEJMvHsF4AOJMWA4oVTTbYjoM/AO8eyPfL/21DBfIso1BX+GEnbfQ7W3kv9htAT5T2Q13ZUGndJpHQYsD8Jmg9KRBJynwyUzOVTXj1xUHzdpCgHRAeeXK73i1OLEuLpYktUQocXnh3cd7O6CFa369Yp1LSZlCovEYK1uKQsC8HKWECfEIxmk5KBSL2b8wQ+TRxgODE1D43muNYH46uydJ60NmuH/wbHodNeucemT/9E
PEn51IZwcyG6Jz0xIcB8+T5NTelSGF/M+fe2qDvNmcM7asHmkrKIqb1SdM68LEWzehBpJPlZYsLDkpOCnM45UouI+rgEwA7kYQGK7Rdr4C8lA6ZVZEuwK+NWHmNysFD/ruCjEv8tBn866Cv6ZF8AuCQTZSBudQk4JWWNIDCJaZnch8VWxvNwdWEtKdRMhiemIXqmuDdFQD0dT9QOWWIw5u7rPq2OstoOmrtTaOx2LIFYUbaw/o7rwyhbZ2O7/3zWoejAkN+oVBj5aHrJiuudvRpfgwZCiMaA8LQwiF1xUlwVa5s8HOvQzaF5KtqK7mimF1v1U5y4E5MefjM74A6xfZQks9p2cLf9w37dUk3STkUrvmX9UicOeHQ8SpDbqBbkT3HiOfHtQu2JZTCnMrrHk5K0XiQSlQITk4tTaYyH5COt1pmjitce1aCuSF+Il1q+rDs3S7lZHS4f+zlRc8DHNFOSHiadofCLGqGy6VNevBH1MiRjV7/u4W1QGm6OsHh2LKhyPoyn+V20UE+UUjLE07qI7NzTy/WZU7t6WNAxc5VFsNHJoCN8pOkfMdTtMbPitpiWBVL4Qohc8EfE3sErog3F3UP/9VRk1UK1IHiO94ChGwONAj1Sj63tbAx0Jts67zF1er+ekQNshSjUwW/PMEvJpRsmBDECheqVgxxqNI1etZ9rs0itCGrlR0uiVMp+6ymwrPu0nUaHSe/7cyc2pUGRg7hxpQYKFHk/wYxG5/NNeSW1721ptfhuVDnqXJ32lyMkpnAs2rrINLH4UhDoPwvPlMfDagTvCC+3pN++7JUNWO0iO7CuJA/emhdBN5gQkkZ0ynUiBz7x4DFC/yIrkZZia3QOZUCww3gA1NANm1ye70GtKnIbK5s+A8I6olbcvbnJs7d/HK97sw1dv6gkKvd9e2gLr1wcNbrbaK0R6i7xpgKwPj2852pd4mOAysRm5BZHM8TPZ+VDi5DYcGBWVVlIIoVQTDX/mrCfG69M58dRe/FBGfVlvQYo59gb79tB/8yj5rPsEq72P2KqGCGMJWiyhfEdC2IFA7cOViEIDl3ilcaBprTnXk/sI+VmiYghuWnpBU0r0d5xKnUdUW13iLQ3aFcqdWK+GyNyEhz3vKu1y62+S3xYnX5Rd3gBeez0E8UJ4DXcvOcjVnWAA3RD0Dmxh7taKeZnrOUFtbifZSzOd8Vbmlojour5XxYoNN+5MGSGuVsDtqrHJtIpXdmgEL3nBB1+g93LltlZZOMmPPYVK6E0EcKJeDCDl3ZspnMp6quwOl2wcT74balQRdGwAwoU9ms6GfD4yMp/5Q5xz+MkHNOAGzVWmHuRSTbWbGHzLuOCv8L1KZ2p0kQLWZ70u7wzlkPdul1L18I0qnXwP66e0GY7yMiDDAPs+uTduUV/Cwlut/SLS/XvJm3zbhTPlcZ0DRa/eR5Ie9iiSLLrkIVFwQcyPLX2YI5CXJ+9v9x8oG1BlE0Ep9SnzKGA3Bi+zZTUbl5QK8h3+DR+H7GfSi3MGBrDCmGYb9fR7dsisIDK0e/ck8wKqXJanj0P+k7VTCUInrHMGqJNeIFkwenfIJXF981o1wjFxYs7ljbbpAHGMyH9YR+gEmckdLy4gG2pLDc3hRw1xlZ359CfbRrGFd+MTTT0X8DPenJ6o9C3S2JwDRS4mJN5KKBSmWxnOlbNZeH9K1Wl34igjtrcSbCv9VSyGhi5ACbg1qk1/GJVZECA8Vo0LG4/0D8LbSHb6xLpGYqTE2CiD2uacwZnfv0lft6GT6IITg3MCJhfeY+VS+FdeYgmJU7lIdWh3HYnMztDSF3hOObrkukh1/s1pgktVNWcn+rJOvBokaKjkFl5ORgCipPyUAwEKsGjI8F2tD+Hii/bDftgccvdbt7pGVd1GHp+FPXRZ+6QJoUmgkcmPq5JuvJwyE7HD7k4tYFhECJBMoMVgwevb46PHnhZKnYfkMfQxkNk9P7BzurcPrP8dkXNyaPv1kD1ktDuBXfPiwSu+MDAL7hWVhFqRxmtdXzDNZrmNB/hNWik403UV8DDgRCKZiY6za09Nvvroc4/5lq1wSh1w9+tSTikdsfNuv5hLGdGTgXt7ww5wJ2kJhAqTevMSqGk8T2H7t87NWBYJ6YpXbY6N5uiwwhGWEP/vePesRiB1zBdiWY/CjdSzeEO5A6xHsg0ntNYMosbuGYSsgjkm7CWSaKVA5ucR28H8oRpwO5rnuGFIuKSXu/qaPWgonTFmvU8VNaMxcxt2e+bRMgmZHmWUhEnO0I2TJEpjOfo4dGVGRPQhuIay6eDWNOo03m0WeNEr2GCPjvhTo1ESjqSRN9ZD0I8SjRYG5dv4ELwNoS7TfbOdiDjo1IWPTAEfIih7PRzX0MubAdY3YfEtZOgyjffiBfT8EjOj5WOlkFeN9DHNYhd4VSVwnncXmKba9q1wOzFAqtKH40c5A91VjxY+Ja+HJot2mFC64uBoR1GOLLOP6QexuHcpe/K61o1b7c3QvL5wDrSt1+UezOjtWMdE1m+gb+B1TdzohI0gOvnOoQ4ID4aWl5kiGXaqdnBWGb6lmK7VisA+/Vs2MEc6iDwcU7jSOdxMWDGiV1WSLuuBddm/7dVeNz64qJ254B0lU9Cz2C6pDP14f2lMmDFTdT9+Et+dAY7v/EW1OAowJ+DhUHYGz0ZICF/odKII7MM8MIT90EBdOMUiJ9Sk2V2yaQ8jbbq5JB1TdLmMyXjzpShzPv2MyBA+mWNNJd856y8U1yekyA4vruXElwZVHcPQNP4yojFBGhYb97KqpGpH3iBmVjfEbS8fZgaQr6/NGY9tZ0xiRKGdyTIVEtaru06ohS+uYPlEPXuQdCcPwFh1kY7paVoV8LFqd65kg++q85qTuZG3L9T0PN9xgycsQG4eQpBn1HmuU4Mbd+2mTN9bGJmr0Wx4shtx+Eq/avX9g1ESfRwQWvEHccVZ/dUi5ob+unznsR+qhLIiuPdvDANxEqdDpes4aiFPzslYE7CfvHoItUIBtCCqUtCeaIeYkSVjWnO3HdaS8fO/9u07HQ2OUY/IIXe0cBImQ8LpKw8s90KBxGVPrKyO8jFRCi01Z5qHZQjboOYe5J4shLUuUDZwPCxK0iXvrNoEcOAWlx72LphQfkU8FCJ92lu+Yb2qrZVvNsdGYv1N3ML1UIadTfMeGkQ8jkGp8Z934FdkuQOSByk16j4Lqvskdtl/0oY2wb7ifp4412w36CtkRD7AabFn75BirlHgzNOw6RBgd+3iF9Rb2apuRbjhx6WE97GKhNDlYYfMzd/DDKY3w39xNX5GvtaAPpfBzY8ohFqBgyJw6rBT81y4iUjqnhJmkBJc8DKInK9vKhtFe2iRZLzxXtZ6O6mlzX+A+5T3IPIhe/OUEZLYxXrUqbMLAeoHp5TToKxyh2Sq69XBBpax9wCt6U6erK8Ac7GDE1a0z1LZMsGal5HAmOER9+qS52gfizTIx6WQAa1mk3WP9JklQCU3DfalM4P2R5O6TQL+dFhsdBagiJOABcbK+hfS0a3w0S9GQaGCrfWJmKLwrqBb5ak4JczxJoNrUsdmidKhGwHBxxs7RhcY5AE+2yIRCcyjmYogQ5neQyrgz8ToEhGI8dvx/3SF/nqHzQ3LLIfFxhRaznFV+pZ+m+rumHub07kzkkwwfBVc3pDAI3vgnl/Xt8aYQJUIZw5o8uN1lOTZ2Z5wZWf9cJ7bR4AK0Ox+4vuedVmwnj6nA7KqS9lBIl6BMvxbRbMDImQboHZapTnNpvwnEi0Hj4dcB5GXMqWVrn9leOobKc+r0yVOF5AZpt/HYxI+QjB4Pde/FZRa6gBZ7/gICY0xy/gBBk0gHLyMB5U5Wj6yBBCKxEmL2ej1c91FO9FDJaSS6vPVibIYGUUo09bHTqpLwu9hAjttAFxQ29N0xqpcel16rELJaIg4PQtIKqwqpxio3FkesEij6TNcW4NDun7s9/wnj/t/hwvu5CZwL7Qfipf3UB2orgxq2U87josDDKNbkEFLJ7O3PHiuxweFq5heow0+RR0R38AVXJ7gVulsuNqHvEs1XXqlBEx2ckAmLHaK3Yx3w6FstVcNfxdElP9aT0MemEZQw5gE8yEwXOOJszbSqmIdlxfX5Nm4i0AeqXNmHEGT2XyLrAo0XrEZZL+IdwO24PcTt46T6Yi+sM6C6RxQozMKwtmGjhDPSTkd8WbCf2032no5wUowkDY+w5m5ZFO3qdof37e2nMB5mEFuPRlWuiRhkQtwE25+QDBBHLwuRL9ENxI247Rv8JSkeVVg7bJsV2KIBYk3LzXAK2Fg/SmMJOUifHs8hV+lv65Fx/b630PiQPOg5fGaFDC/Lj2dvDTXy1X
offer.md</description>
    </item>
    
    <item>
      <title>ReentrantReadWrite...</title>
      <link>https://jiandar.github.io/docs/java/concurrency/lock/ReentrantReadWriteLock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/lock/ReentrantReadWriteLock/</guid>
      <description>ReentrantReadWriteLock#</description>
    </item>
    
    <item>
      <title>原型模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/creational/04-prototype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/creational/04-prototype/</guid>
      <description>原型模式#概述# 英文：Prototype Pattern 简述：通过拷贝原型创建新的对象 归纳：拔一根猴毛，吹出千万个 目的：高效创建对象 案例：克隆  示例#// 原型类：实现Cloneable接口 public class Prototype implements Cloneable { private String name; // setter、getter...  // clone方法  public Object clone(){ try { return super.clone(); } catch (Exception e) { e.printStackTrace(); return null; } } } public class Test { public static void main(String[] args) { Prototype pro1=new Prototype(); pro1.setName(&amp;#34;张三&amp;#34;); //以pro1为原型，克隆得到pro2  Prototype pro2=(Prototype)pro1.clone(); System.</description>
    </item>
    
    <item>
      <title>垃圾收集器</title>
      <link>https://jiandar.github.io/docs/java/jvm/gc/collector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/jvm/gc/collector/</guid>
      <description>垃圾收集器#回收方式# 串行（Serial）、并行（Parallel）、并发（Concurrent）、STW  七大收集器#收集器：Serial 、Serial Old# 单个垃圾收集线程串行工作，会暂停所有用户线程，不适合服务器环境 Serial：新生代，复制算法 Serial Old：老年代，标记 - 整理算法  收集器：ParNew# Serial 收集器的多线程（即并行）版本 ParNew：新生代，复制算法  收集器：Parallel Scavenge / Old# 多个垃圾收集线程并行工作，会暂停所有用户线程，适合科学算/大数据处理等弱交互场景 Parallel Scavenge：新生代，复制算法，可控制吞吐量 Parallel Old：老年代，标记 - 整理算法  收集器：CMS#概述# 用户线程和垃圾收集线程并发执行，互联网公司多用它，适用对响应时间有要求的场景 Concurrent Mark Sweep：老年代，标记 - 清除算法  优缺点# 并发收集低停顿，但对CPU资源压力大，且会产生大量碎片  步骤# 初始标记（CMS initial mark） 并发标记（CMS concurrent mark） 重新标记（CMS remark） 并发清除（CMS concurrent sweep）  收集器：G1#概述# 将堆内存分割成不同的区域然后并发的对其进行垃圾回收 面向服务端应用，适用于多处理器和大容量内存环境 G1：整体上采用标记-整理算法，局部是采用复制算法  步骤# 初始标记（Initial Marking） 并发标记（Concurrent Marking） 最终标记（Final Marking） 筛选回收（Live Data Counting and Evacuation）  原理#  Garbage First</description>
    </item>
    
    <item>
      <title>多态</title>
      <link>https://jiandar.github.io/docs/java/oop/polymorphism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/oop/polymorphism/</guid>
      <description>多态#多态# 指允许不同子类对象对同一消息作出不同的响应  前提# 继承 重写 父类引用指向子类对象  示例#abstract class Animal { public abstract void run(); } class Cat extends Animal { public void run() { System.out.println(&amp;#34;猫跑了......&amp;#34;); } } class Dog extends Animal { public void run() { System.out.println(&amp;#34;狗跑了......&amp;#34;); } } class Lady { private Animal pet; Lady(Animal pet) { this.pet = pet; } public void myPetRun(){ pet.run(); } } public class Test { public static void main(String args[]){ Cat c = new Cat(); Dog d = new Dog(); Lady l1 = new Lady(c); Lady l2 = new Lady(d); l1.</description>
    </item>
    
    <item>
      <title>定时线程池</title>
      <link>https://jiandar.github.io/docs/java/concurrency/threadpool/ScheduledThreadPoolExecutor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/threadpool/ScheduledThreadPoolExecutor/</guid>
      <description>ScheduledThreadPoolExecutor#</description>
    </item>
    
    <item>
      <title>归并排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/merge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/merge/</guid>
      <description>归并排序#归并操作# 将已有序的子序列合并，得到完全有序的序列  算法步骤# 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列； 设定两个指针，最初位置分别为两个已经排序序列的起始位置； 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置； 重复步骤 3 直到某一指针达到序列尾； 将另一序列剩下的所有元素直接复制到合并序列尾。  动图演示#代码实现#public class MergeSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { if (arr.length &amp;lt; 2) { return arr; } int middle = (int) Math.floor(arr.length / 2); int[] left = Arrays.copyOfRange(arr, 0, middle); int[] right = Arrays.copyOfRange(arr, middle, arr.length); return merge(sort(left), sort(right)); } protected int[] merge(int[] left, int[] right) { int[] result = new int[left.</description>
    </item>
    
    <item>
      <title>收尾工作</title>
      <link>https://jiandar.github.io/docs/private/employment/interview/after-interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/private/employment/interview/after-interview/</guid>
      <description>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
after-interview.md</description>
    </item>
    
    <item>
      <title>数组</title>
      <link>https://jiandar.github.io/docs/java/basic-grammar/array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-grammar/array/</guid>
      <description>数组#概述# 数组是相同类型数据的有序集合，代表着一串连续的内存空间  特点# 数组元素必须是相同类型 数组一旦被创建，其长度就是不可变的 数组元素的索引（下标），从 0 开始 数值类型元素的默认值为 0，引用类型元素的默认值为 null  创建数组#// 一维数组 dataType[] arrayRefVar; dataType[] arrayRefVar = new dataType[arraySize]; dataType[] arrayRefVar = {value0, value1, ..., valuek}; // 示例 int[] arr1; int[] arr2 = new int[2]; int[] arr3 = {1, 2, 3} // 多维数组 dataType[][] arrayRefVar = new dataType[arraySize1][arraySize2]; dataType[][] arrayRefVar = {{value0, value1, ..., valuek},{...},...}; // 示例 int[][] arr1 = new int[2][3]; int[][] arr2 = {{1, 2, 3},{4, 5},{6, 7, 8, 9}}; 操作数组#int a,b; int[] arr = {0, 1, 2, 3}; a = arr[0]; // 元素引用 b = arr.</description>
    </item>
    
    <item>
      <title>浮动</title>
      <link>https://jiandar.github.io/docs/dev-lang/css/position/float/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/css/position/float/</guid>
      <description>浮动#属性属性说明属性值属性值说明float浮动none不浮动，默认left左浮动right右浮动inherit继承clear清除浮动none两侧元素，允许浮动，默认值。left左侧元素，不允许浮动right右侧元素，不允许浮动both两侧元素，不允许浮动inherit继承浮动规则# 浮动元素  不会重叠 不会上下浮动 会脱离标准流   浮动元素的外边距，不会超过父元素内边距 非浮动元素的文本，会环绕浮动元素周围  </description>
    </item>
    
    <item>
      <title>索引</title>
      <link>https://jiandar.github.io/docs/database/mysql/advanced-feature/mysql-index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/database/mysql/advanced-feature/mysql-index/</guid>
      <description>索引#定义# 索引是一种特殊的文件，它们包含着对所有记录的引用指针 优点：类似书的目录，可以极大地提高数据检索速度 缺点：维护索引会增加额外的开销  原则# 最左侧原则：表的最左侧的一列，往往数据不会发生改变，不影响其他列的数据 命名短小原则：索引命名过长会使索引文件变大，损耗内存  分类# 普通索引：最基本的索引，没有任何限制 唯一索引：索引列的值必须唯一 ，允许有空值 主键索引：一种特殊的唯一索引，一张表中只能定义一个，用来标识一条数据，不能为空 全文索引：仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时耗空间 聚合索引：覆盖多个数据列的索引  实现# B-Tree：比较适合用作&#39;&amp;gt;&amp;lsquo;或&amp;rsquo;&amp;lt;&amp;lsquo;这样的范围查询，在MySQL中最为常用 R-Tree：用于处理多维数据的数据结构，可以对地理数据进行空间索引。运用较少 Hash：使用散列表来对数据进行索引。效率高于B-Tree，但是不支持范围查找和排序。运用较少 FullText：全文索引，是一种记录关键字与对应文档关系的倒排索引。  </description>
    </item>
    
    <item>
      <title>线程状态</title>
      <link>https://jiandar.github.io/docs/java/concurrency/thread/thread-state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/thread/thread-state/</guid>
      <description>线程状态#线程状态#   状态码 状态 说明     NEW 初始状态 线程被构建，但是还没有调用 start() 方法   RUNNABLE 运行状态 线程已经启动，拥有执行资格，如果取得执行资源则执行   BLOCKED 阻塞状态 线程挂起，阻塞于锁   WAITING 等待状态 线程等待中，需要被显式地唤醒，否则会无限期等待   TIMED_WAITING 超时等待 线程等待中，在达到一定时间后，会自动唤醒   TERMINATED 终止状态 线程已经执行完毕    状态转换#   方法 调用者 描述 对象锁 唤醒     Thread.sleep(t) 当前线程 休眠当前线程 不释放 一定时间后自动唤醒   Thread.</description>
    </item>
    
    <item>
      <title>背景样式</title>
      <link>https://jiandar.github.io/docs/dev-lang/css/style/background/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/css/style/background/</guid>
      <description>背景样式#属性属性说明属性值属性值说明background简写&amp;nbsp;空格分隔各值，不分顺序background-color背景颜色transparent透明色，默认color颜色值background-image背景图片none无图片，默认url(&#39;URL&#39;)图片路径background-repeat背景图片重复repeat默认。垂直方向及水平方向重复repeat-x水平方向重复repeat-y垂直方向重复no-repeat不重复background-attachment背景图片滚动scroll跟随滚动。默认fixed固定background-position背景图片起始位置当只有一个值时，第二个值默认为居中x%、y%百分比，默认0% 0%x、y数值top上bottom下left左right右center中示例#body{ background-image:url(&amp;#39;/i/eg_bg_03.</description>
    </item>
    
    <item>
      <title>语句</title>
      <link>https://jiandar.github.io/docs/database/mysql/basic/sentence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/database/mysql/basic/sentence/</guid>
      <description>语句#分支结构#if 语句#  作为表达式，嵌套在其他语句中使用，可以放在任何地方
  作为独立的语句去使用，只能放在 begin...end 中
# 格式：作为表达式if(条件, 判断为ture返回, 判断为false返回) # 格式：作为独立语句if 条件1 then 语句1;elseif 条件2 then 语句2;else 语句n;end if;-- 示例：判断 5&amp;lt;10，true返回“大”，false返回“小” select if(5&amp;lt;10, &amp;#39;大&amp;#39;, &amp;#39;小&amp;#39;); -- 示例：创建函数，根据传入的成绩来显示等级 drop function if exists testIf; delimiter $ create function testIf(score int) returns char(3) begin if score&amp;gt;=90 then return &amp;#39;优秀&amp;#39;; elseif score&amp;gt;=80 then return &amp;#39;良好&amp;#39;; elseif score&amp;gt;=60 then return &amp;#39;及格&amp;#39;; else return &amp;#39;不及格&amp;#39;; end if; end$ select testIf(66) as &amp;#39;成绩&amp;#39;;   case 语句#  作为表达式，嵌套在其他语句中使用，可以放在任何地方</description>
    </item>
    
    <item>
      <title>链接标签</title>
      <link>https://jiandar.github.io/docs/dev-lang/html/link/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/html/link/</guid>
      <description>URL# .代表当前网页所在目录，可省略 ..代表当前网页所在目录的上一级目录  //绝对路径 &amp;lt;img src=&amp;#34;D:/html/img.png&amp;#34; /&amp;gt; //相对路径 &amp;lt;img src=&amp;#34;../img.png&amp;#34; /&amp;gt; &amp;lt;a&amp;gt;# 定义一个链接 属性：  title：链接提示文字 href：链接地址 target：在何处打开链接：_blank、_parent、_self、_top    //链接到资源 &amp;lt;a href=&amp;#34;https://www.baidu.com/&amp;#34; /&amp;gt; &amp;lt;a href=&amp;#34;../xxx.html&amp;#34; /&amp;gt; &amp;lt;a href=&amp;#34;../xxx.rar&amp;#34; /&amp;gt; //链接到邮件 &amp;lt;a href=&amp;#34;mailto:xxx@qq.com&amp;#34; /&amp;gt; //定义锚点 &amp;lt;a name=&amp;#34;mark&amp;#34; /&amp;gt; //链接到锚点 &amp;lt;a href=&amp;#34;#mark&amp;#34; /&amp;gt; &amp;lt;a href=&amp;#34;../xxx.html#&amp;gt;mark&amp;#34; /&amp;gt; &amp;lt;img&amp;gt;# 定义一个图像 属性：  src：定义图像的URL alt：定义图像的替代文本 width：定义图像的宽 height：定义图像的高    &amp;lt;img src=&amp;#34;xxx.png&amp;#34; alt=&amp;#34;xxx&amp;#34; width=&amp;#34;40&amp;#34; height=&amp;#34;40&amp;#34; /&amp;gt; </description>
    </item>
    
    <item>
      <title>CAS</title>
      <link>https://jiandar.github.io/docs/java/concurrency/theory/CAS/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/theory/CAS/</guid>
      <description>CAS 算法#CAS# 比较并交换，Compare-And-Swap，是一种无锁算法 基于硬件原语实现，能够在不使用锁的情况下实现多线程之间的变量同步 Java CAS硬件底层接口 ：sun.misc.Unsafe  CAS 机制# 涉及到三个参数，数据所在的内存地址 V，旧的预期值 A，要修改的更新值 B 从 V 取值，和 A 做比较，如果相等，则更新为 B。如果不相等则重试 一般情况下是一个自旋操作，即不断的重试。  CAS 缺点# 自旋时间长开销很大 只能保证一个共享变量的原子性 存在 ABA 问题  ABA 问题# 在 CAS 操作中，内存中某时刻的值与下一时刻再次读取的值相等，并不意味着数据没有被修改 存在这种情况：在这段时间内，其他线程将 A 值改成 B 值，又改回 A 值。而CAS却误认为数据未被修改 解决方案：  1、加版本号（时间戳）； 2、时间戳原子引用：AtomicStampedReference&amp;lt;V&amp;gt;    </description>
    </item>
    
    <item>
      <title>ConcurrentHashMap</title>
      <link>https://jiandar.github.io/docs/java/container/Map/ConcurrentHashMap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/container/Map/ConcurrentHashMap/</guid>
      <description>ConcurrentHashMap#概述# ConcurrentHashMap 是 HashMap 的扩展版本，支持并发，是线程安全的  特点#   键 允许为null，不允许重复     值 允许为null，允许重复   顺序 无序   多线程 线程安全    继承关系#public class ConcurrentHashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; implements ConcurrentMap&amp;lt;K,V&amp;gt;, Serializable { 构造方法#// 默认 public ConcurrentHashMap() { } // 指定初始容量 public ConcurrentHashMap(int initialCapacity) { //... } // 指定初始容量、负载因子 public ConcurrentHashMap(int initialCapacity, float loadFactor) { this(initialCapacity, loadFactor, 1); } // 指定初始容量、负载因子、并发级别 public ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel) { //.</description>
    </item>
    
    <item>
      <title>Condition</title>
      <link>https://jiandar.github.io/docs/java/concurrency/lock/Condition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/lock/Condition/</guid>
      <description>Condition#</description>
    </item>
    
    <item>
      <title>FutureTask</title>
      <link>https://jiandar.github.io/docs/java/concurrency/threadpool/FutureTask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/threadpool/FutureTask/</guid>
      <description>FutureTask#</description>
    </item>
    
    <item>
      <title>Q&amp;A</title>
      <link>https://jiandar.github.io/docs/computer/question/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/computer/question/</guid>
      <description>Q&amp;amp;A#URL &amp;amp; URI#   URI URL     Uniform Resource Identifier，统一资源标识符 Uniform Resource Location，统一资源定位符   是一种语义上的抽象概念 是URI的一个子集，一种具体的URI   唯一标识了资源 唯一标识并定位了资源    GET &amp;amp; POST#    GET POST     书签 可收藏为书签 不可收藏为书签   缓存 能被缓存 不能缓存   历史 参数保留在浏览器历史中 参数不会保存在浏览器历史中   安全性 安全性比POST低，因为所发送的数据是 URL 的一部分 比GET更安全，因为参数不会被保存在浏览器历史或服务器日志中   可见性 数据在 URL 中对所有人都是可见的 数据不会显示在 URL 中   数据长度 受限，URL 的最大长度是 2048 个字符 无限制   数据类型 只允许 ASCII 字符 无限制   编码类型 application/x-www-form-urlencoded application/x-www-form-urlencoded multipart/form-data   后退/刷新 无害 数据会被重新提交    HTTP &amp;amp; HTTPS# https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。 http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。 http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。 http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。  Cookie &amp;amp; Session# Cookie、Session 都是一种用于维持客户端与服务端之间会话的机制      Cookie Session     数据存放位置 客户的浏览器 服务器   安全程度 可能会被篡改 安全   性能方面 只影响客户的浏览器 占用服务器性能   存储数据量 客户的浏览器对其有限制 不影响   存储结构 键值对形式的文本 哈希表结构    forward &amp;amp; redirect# 转发是服务器行为，重定向是客户端行为     请求转发 请求重定向     服务器内部跳转，所有地址栏上的路径不会改变 是浏览器再次发送请求，地址栏上的路径会发生改变   只发送一次请求 会发送两次请求   只能在当前应用内部跳转 可以在内部跳转，也可以跳出当前应用   可以共享reqeust 不能可以共享reqeust   request.</description>
    </item>
    
    <item>
      <title>典型面试问题</title>
      <link>https://jiandar.github.io/docs/private/employment/interview/interview-question/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/private/employment/interview/interview-question/</guid>
      <description>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
interview-question.md</description>
    </item>
    
    <item>
      <title>建造者模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/creational/05-builder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/creational/05-builder/</guid>
      <description>建造者模式#概述# 英文：Builder Pattern 简述：用来创建复杂的复合对象 归纳：高配中配和低配，想选哪配就哪配 目的：开放个性配置步骤 案例：选配  示例#// 被建造的复杂对象 public class House { private String baise; private String wall; private String roofed; // getter、setter  //... } // 抽象建造者：主要用来指定建造步骤 public abstract class HouseBuilder { protected House house = new House(); //建设房屋的基本方法，建设根基、建设墙、建设屋顶 	public abstract void buildBasic(); public abstract void buildWalls(); public abstract void roofed(); public House buildHouse() { return house; } } // 类似产品类：CommonHouse public class HighBuilding extends HouseBuilder{ @Override public void buildBasic() { System.</description>
    </item>
    
    <item>
      <title>快速排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/quick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/quick/</guid>
      <description>快速排序#算法步骤# 先从数列中取出一个数作为基准数。 分区过程：将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。 再对左右区间重复第二步，直到各区间只有一个数。  动图演示#代码实现#public class QuickSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { return quickSort(arr, 0, arr.length - 1); } private int[] quickSort(int[] arr, int left, int right) { if (left &amp;lt; right) { int partitionIndex = partition(arr, left, right); quickSort(arr, left, partitionIndex - 1); quickSort(arr, partitionIndex + 1, right); } return arr; } private int partition(int[] arr, int left, int right) { // 设定基准值（pivot）  int pivot = left; int index = pivot + 1; for (int i = index; i &amp;lt;= right; i++) { if (arr[i] &amp;lt; arr[pivot]) { swap(arr, i, index); index++; } } swap(arr, pivot, index - 1); return index - 1; } private void swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } </description>
    </item>
    
    <item>
      <title>抽象</title>
      <link>https://jiandar.github.io/docs/java/oop/abstraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/oop/abstraction/</guid>
      <description>抽象#抽象# 是将一类对象的共同特征总结出来构造类的过程  抽象类# 抽象方法：只有方法声明，没有方法实现 抽象类：包含抽象方法的类 特征：  抽象类不能实例化。 抽象类的非抽象子类必须实现父类抽象方法 抽象方法、抽象类必须被abstract修饰 抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类 构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法    //示例 abstract class Animal{ String name; public abstract void run(); } class Dog extends Animal{ public void run(){ System.out.println(&amp;#34;run&amp;#34;); } } 接口# 接口是一种特殊的抽象类，是抽象方法的集合。用 interface 定义。 特点  隐式抽象 支持多继承 没有构造方法 接口的方法都是公有的、隐式抽象的 接口的成员变量只能是public static final 的。    //示例 interface Animal{ public static final int id = 1; public void run(); public void eat(); } //接口继承接口 interface fish extends Animal{ //.</description>
    </item>
    
    <item>
      <title>方法</title>
      <link>https://jiandar.github.io/docs/java/basic-grammar/method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/basic-grammar/method/</guid>
      <description>方法#方法的定义# 方法包含于类中 方法中不能定义方法 若无返回值，用 void 代替  // 格式 修饰符 返回值类型 方法名(参数类型 参数名){ ... 方法体 ... return 返回值; } // 示例 public static int age(int birthday){ //... } 方法的调用#// 格式 对象名.函数名（实参列表） // 示例 public int max(int a,int b){ if(a&amp;gt;b){ return a; } return b; } public static void main(String []args) { int larger = max(30, 40); //... } 重载 &amp;amp; 重写#  重载 overload</description>
    </item>
    
    <item>
      <title>表格标签</title>
      <link>https://jiandar.github.io/docs/dev-lang/html/table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/html/table/</guid>
      <description>表格标签#   标签 说明     &amp;lt;table&amp;gt; 定义表格   &amp;lt;tr&amp;gt; 定义表格行   &amp;lt;td&amp;gt; 定义表格单元格   &amp;lt;th&amp;gt; 定义表头单元格   &amp;lt;caption&amp;gt; 定义表格标题   &amp;lt;thead&amp;gt; 定义表格页眉   &amp;lt;tbody&amp;gt; 定义表格主体   &amp;lt;tfoot&amp;gt; 定义表格页脚    标签属性#  &amp;lt;table&amp;gt;
 width：表格宽度 border：边框宽度 cellspacing：单元格间距 cellpadding：单元格与内容间距    &amp;lt;td&amp;gt;、&amp;lt;th&amp;gt;
 colspan：单元格横跨几列 rowspan：单元格横跨几行    共同属性#属性属性值属性值说明水平对齐：alignleft左对齐（默认）right右对齐center居中对齐justify拉伸对齐char对齐指定字符垂直对齐：valigntop顶部对齐（默认）middle居中对齐bottom底部对齐baseline基线对齐示例#&amp;lt;table border=&amp;#34;1&amp;#34; width=&amp;#34;70%&amp;#34; cellspacing=&amp;#34;0&amp;#34;&amp;gt; &amp;lt;caption&amp;gt;表格标题&amp;lt;/caption&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;北京&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;上海&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;广州&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;.</description>
    </item>
    
    <item>
      <title>视图</title>
      <link>https://jiandar.github.io/docs/database/mysql/advanced-feature/view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/database/mysql/advanced-feature/view/</guid>
      <description>视图#定义# 视图是一种虚拟存在的表，对于使用视图的用户来说基本上是透明的 视图并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成  优点# 简单：视图中数据即为目标数据，用户不需要关心对应的表的结构 安全：使用视图，可以限制用户只能访问他们被允许查询的结果集 数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响  视图管理## 创建视图 create view 视图名 as select指令; # 使用视图# 视图是一张虚拟表，可以直接把视图当做“表”来操作。 # 修改视图alter view 视图名字 as 新select指令; # 删除视图drop view 视图名;</description>
    </item>
    
    <item>
      <title>LockSupport</title>
      <link>https://jiandar.github.io/docs/java/concurrency/lock/LockSupport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/java/concurrency/lock/LockSupport/</guid>
      <description>LockSupport#</description>
    </item>
    
    <item>
      <title>事务</title>
      <link>https://jiandar.github.io/docs/database/mysql/advanced-feature/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/database/mysql/advanced-feature/transaction/</guid>
      <description>事务#定义# Transaction，一个最小的不可再分的工作单元，通常对应一个完整的业务 由事务开始和事务结束之间执行的全体操作组成  事务特性：ACID# 原子性：Atomicity，事务应该当作一个单独单元的操作，要么成功，要么失败 一致性：Consistency，事务的执行不能破坏数据库数据的完整性和一致性 隔离性：Isolation，并发事务执行之间无影响 持久性：Durability，事务一旦执行成功，它对数据库的数据的改变必须是永久的  事务并发问题#   脏读 一个事务处理过程里读取了另一个未提交的事务中的数据。     不可重复读 在一个事务中，对同一条记录，多次查询到的数据值不一致。（针对 update）   幻读 在一个事务中，对于多条记录，多次查询到的记录条数不一致。（针对 insert）    隔离级别#   级别 隔离级别 描述 脏读 不可重复读 幻读     级别一 读未提交 可以读取到其他事务未提交的内容 √ √ √   级别二 读已提交 只能读取到其他事务已经提交的数据 × √ √   级别三 可重复读 整个事务过程中，对同数据的多次读取结果是相同的 × × √   级别四 串行化 所有事务操作都依次顺序执行，性能最差 × × ×    事务管理## 开始一个事务begin # 事务回滚rollback # 事务确认commit # 增加回滚点savepoint 回滚点名; # 回到回滚点rollback to 回滚点名; -- 创建数据表 create table runoob_transaction_test( id int(5)) engine=innodb; -- 开启事务 begin; -- 事务操作 insert into runoob_transaction_test value(5); insert into runoob_transaction_test value(6); -- 回滚事务 -- rollback;  -- 提交事务 commit; </description>
    </item>
    
    <item>
      <title>代理模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/structural/06-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/structural/06-proxy/</guid>
      <description>代理模式#概述# 英文：Proxy Pattern 简述：为其他对象提供一种代理以控制对这个对象的访问 归纳：没有资源没时间，得找别人来帮忙 目的：增强职责 案例：媒婆  示例#   类型 区别     静态代理 手动生成代理类   动态代理 运用反射机制，动态生成代理类   JDK 动态代理 只能代理实现了接口的类   CGLib 动态代理 对目标类生成一个子类，并覆盖其中方法实现增强。 但因为采用的是继承，所以不能对final修饰的类进行代理    静态代理#// 被代理目标类 public interface Wow { void tbc(); } public class Blizzard implements Wow { @Override public void tbc() { System.out.println(&amp;#34;《魔兽世界》：燃烧的远征&amp;#34;); } } // 代理类 public class NetEasy implements Wow { private Blizzard blizzard; // 传递被代理对象  public NetEasy(Blizzard blizzard) { this.</description>
    </item>
    
    <item>
      <title>希尔排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/shell/</guid>
      <description>希尔排序#希尔排序# 是插入排序的改进版本。 先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序 待整个序列中的记录&amp;quot;基本有序&amp;quot;时，再对全体记录进行依次直接插入排序。  算法步骤# 选择一个增量序列 t1，t2，……，tk，其中 ti &amp;gt; tj, tk = 1； 按增量序列个数 k，对序列进行 k 趟排序； 每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。 仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。  动图演示#代码实现#public class ShellSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { int length = arr.length; int temp; for (int step = length / 2; step &amp;gt;= 1; step /= 2) { for (int i = step; i &amp;lt; length; i++) { temp = arr[i]; int j = i - step; while (j &amp;gt;= 0 &amp;amp;&amp;amp; arr[j] &amp;gt; temp) { arr[j + step] = arr[j]; j -= step; } arr[j + step] = temp; } } } } </description>
    </item>
    
    <item>
      <title>表单标签</title>
      <link>https://jiandar.github.io/docs/dev-lang/html/form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-lang/html/form/</guid>
      <description>&amp;lt;form&amp;gt;#   属性 描述     accept-charset 字符集   action 提交目的地 URL   method 提交方式，get、post   target 打开方式，_blank 、_self、 _parent 、_top    &amp;lt;form action=&amp;#34;xxx.php&amp;#34; method=&amp;#34;get&amp;#34;&amp;gt; 姓名：&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;username&amp;#34; size=&amp;#34;15&amp;#34; placeholder=&amp;#34;请输入姓名&amp;#34; /&amp;gt; 密码：&amp;lt;input type=&amp;#34;password&amp;#34; name=&amp;#34;pwd&amp;#34; maxlength=&amp;#34;8&amp;#34; placeholder=&amp;#34;请输入密码&amp;#34; /&amp;gt; 照片：&amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;pic&amp;#34; /&amp;gt; 性别： &amp;lt;input type=&amp;#34;radio&amp;#34; name=&amp;#34;sex&amp;#34; value=&amp;#34;man&amp;#34; checked/&amp;gt;男 &amp;lt;input type=&amp;#34;radio&amp;#34; name=&amp;#34;sex&amp;#34; value=&amp;#34;woman&amp;#34; /&amp;gt;女 爱好： &amp;lt;input type=&amp;#34;checkbox&amp;#34; name=&amp;#34;hobby&amp;#34; value=&amp;#34;read&amp;#34; checked/&amp;gt;读书 &amp;lt;input type=&amp;#34;checkbox&amp;#34; name=&amp;#34;hobby&amp;#34; value=&amp;#34;dance&amp;#34; /&amp;gt; 跳舞 &amp;lt;input type=&amp;#34;checkbox&amp;#34; name=&amp;#34;hobby&amp;#34; value=&amp;#34;sing&amp;#34; /&amp;gt; 唱歌 城市: &amp;lt;select name=&amp;#34;city&amp;#34;&amp;gt; &amp;lt;option value=&amp;#34;0&amp;#34; selected&amp;gt;__请选择__&amp;lt;/option&amp;gt; &amp;lt;optgroup label=&amp;#34;北方&amp;#34;&amp;gt; &amp;lt;option value=&amp;#34;bj&amp;#34;&amp;gt;北京&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;tj&amp;#34;&amp;gt;天津&amp;lt;/option&amp;gt; &amp;lt;/optgroup&amp;gt; &amp;lt;optgroup label=&amp;#34;南方&amp;#34;&amp;gt; &amp;lt;option value=&amp;#34;gz&amp;#34;&amp;gt;广州&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;sz&amp;#34;&amp;gt;深圳&amp;lt;/option&amp;gt; &amp;lt;/optgroup&amp;gt; &amp;lt;/select&amp;gt; 备注： &amp;lt;textarea name=&amp;#34;tips&amp;#34; cols=&amp;#34;5&amp;#34; rows=&amp;#34;5&amp;#34;&amp;gt; 这是一段多行文字 &amp;lt;/textarea&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;input&amp;gt;#   type 描述     hidden 隐藏   text 文本域   password 密码域   radio 单选框   checkbox 复选框   file 文件输入框   image 图片输入框   button 按钮   reset 重置按钮   submit 提交按钮    &amp;lt;select&amp;gt;# 定义下拉列表  &amp;lt;select name=&amp;#34;cars&amp;#34;&amp;gt; &amp;lt;option value=&amp;#34;volvo&amp;#34;&amp;gt;Volvo&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;saab&amp;#34;&amp;gt;Saab&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;fiat&amp;#34;&amp;gt;Fiat&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;audi&amp;#34;&amp;gt;Audi&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;textarea&amp;gt;# 定义多行文本  &amp;lt;textarea name=&amp;#34;message&amp;#34; rows=&amp;#34;10&amp;#34; cols=&amp;#34;30&amp;#34;&amp;gt; The cat was playing in the garden.</description>
    </item>
    
    <item>
      <title>桥接模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/structural/07-bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/structural/07-bridge/</guid>
      <description>桥接模式#概述# 英文：Bridge Pattern 简述：将两个能够独立变化的部分分离开来 归纳：约定优于配置 目的：不允许用继承 案例：桥  示例#// 品牌 public interface Brand { void sale(); } // 类似品牌：Shenzhou、Huawei public class Dell implements Brand { @Override public void sale() { System.out.println(&amp;#34;出售戴尔&amp;#34;); } } // 电脑 public class Computer { protected Brand brand; public Computer(Brand brand) { this.brand = brand; } public void sale(){ brand.sale(); } } // 类似电脑：Laptop public class Desktop extends Computer { public Desktop(Brand b) { super(b); } @Override public void sale() { super.</description>
    </item>
    
    <item>
      <title>计数排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/counting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/counting/</guid>
      <description>计数排序#计数排序# 要求输入的数据必须是有确定范围的整数 计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。  算法步骤# 找出待排序的数组中最大和最小的元素 统计数组中每个值为i的元素出现的次数，存入数组C的第i项 对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加） 反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1  动图演示#代码实现#public class CountingSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { int maxValue = getMaxValue(arr); return countingSort(arr, maxValue); } private int[] countingSort(int[] arr, int maxValue) { int bucketLen = maxValue + 1; int[] bucket = new int[bucketLen]; for (int value : arr) { bucket[value]++; } int sortedIndex = 0; for (int j = 0; j &amp;lt; bucketLen; j++) { while (bucket[j] &amp;gt; 0) { arr[sortedIndex++] = j; bucket[j]--; } } return arr; } private int getMaxValue(int[] arr) { int maxValue = arr[0]; for (int value : arr) { if (maxValue &amp;lt; value) { maxValue = value; } } return maxValue; } } </description>
    </item>
    
    <item>
      <title>基数排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/radix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/radix/</guid>
      <description>基数排序#基数排序# 是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。  基数排序 vs 计数排序 vs 桶排序#  都利用了桶的概念
  基数排序：根据键值的每位数字来分配桶；
  计数排序：每个桶只存储单一键值；
  桶排序：每个桶存储一定范围的数值；
​
  算法步骤# 将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。 然后，从最低位开始，依次进行一次排序。 这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列。  动图演示#代码实现#/** * 考虑负数的情况还可以参考： https://code.i-harness.com/zh-CN/q/e98fa9 */ public class RadixSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { int maxDigit = getMaxDigit(arr); return radixSort(arr, maxDigit); } // 获取最高位数  private int getMaxDigit(int[] arr) { int maxValue = getMaxValue(arr); return getNumLenght(maxValue); } private int getMaxValue(int[] arr) { int maxValue = arr[0]; for (int value : arr) { if (maxValue &amp;lt; value) { maxValue = value; } } return maxValue; } protected int getNumLenght(long num) { if (num == 0) { return 1; } int lenght = 0; for (long temp = num; temp !</description>
    </item>
    
    <item>
      <title>外观模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/structural/08-facade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/structural/08-facade/</guid>
      <description>外观模式#概述# 英文：Facade Pattern 简述：对外提供一个统一的接口用来访问子系统 归纳：打开一扇门，通向全世界 目的：统一访问入口 案例：前台  示例#// 子系统 public interface Shape { void draw(); } // 类似子系统：Rectangle、Square public class Circle implements Shape { @Override public void draw() { System.out.println(&amp;#34;Circle::draw()&amp;#34;); } } // 外观类 public class ShapeMaker { private Shape circle; private Shape rectangle; private Shape square; public ShapeMaker() { circle = new Circle(); rectangle = new Rectangle(); square = new Square(); } public void drawCircle() { circle.</description>
    </item>
    
    <item>
      <title>桶排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/bucket/</guid>
      <description>桶排序#桶排序# 是计数排序的升级版。它利用了函数的映射关系  影响效率的因素# 桶的数量 映射函数将输入的 N 个数据分配到 K 个桶中的均匀程度 桶内的排序算法  示意图#代码实现#public class BucketSort implements IArraySort { private static final InsertSort insertSort = new InsertSort(); @Override public int[] sort(int[] arr) throws Exception { return bucketSort(arr, 5); } private int[] bucketSort(int[] arr, int bucketSize) throws Exception { if (arr.length == 0) { return arr; } int minValue = arr[0]; int maxValue = arr[0]; for (int value : arr) { if (value &amp;lt; minValue) { minValue = value; } else if (value &amp;gt; maxValue) { maxValue = value; } } int bucketCount = (int) Math.</description>
    </item>
    
    <item>
      <title>组合模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/structural/09-composite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/structural/09-composite/</guid>
      <description>组合模式#概述# 英文：Composite Pattern 简述：将整体与局部（树形结构）进行递归组合，让客户端能够以一致的方式对其进行处理 归纳：人在一起叫团伙，心在一起叫团队 目的：统一整体和个体 案例：组织架构树  示例#// 节点 public class Employee { // 节点属性  private String name; private String dept; public Employee(String name, String dept) { this.name = name; this.dept = dept; subEmployees = new ArrayList&amp;lt;&amp;gt;(); } // setter、getter  // ......  // 子节点集合  private List&amp;lt;Employee&amp;gt; subEmployees; public List&amp;lt;Employee&amp;gt; getSubEmployees() { return subEmployees; } public void add(Employee employee) { subEmployees.</description>
    </item>
    
    <item>
      <title>享元模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/structural/10-flyweight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/structural/10-flyweight/</guid>
      <description>享元模式#概述# 英文：Flyweight Pattern 简述：使用对象池来减少重复对象的创建 归纳：优化资源配置，减少重复浪费 目的：共享资源池 案例：全国社保联网  示例#// 享元类 public interface IChess { public void draw(); } public class Chess implements IChess { // 内部状态：不可改变，可以共享  private String color; public Chess(String color) { this.color = color; } // 外部状态：可以改变，不可共享  private String position; public void setPosition(String position) { this.position = position; } @Override public void draw() { System.out.println(&amp;#34;围棋：color=&amp;#34; + color + &amp;#34;, position=&amp;#34; + position); } } // 享元工厂 public class ChessFactory { // 池容器  private static final HashMap&amp;lt;String, IChess&amp;gt; chessMap = new HashMap&amp;lt;&amp;gt;(); // 获取享元对象  public static Chess getChess(String color) { if (!</description>
    </item>
    
    <item>
      <title>堆排序</title>
      <link>https://jiandar.github.io/docs/dev-design/algorithm/sort/heap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/algorithm/sort/heap/</guid>
      <description>堆排序#堆排序# 堆是一个二叉树，其子结点的键值或索引总是小于（或者大于）它的父节点 堆排序就是利用堆这种特性进行排序  算法步骤# 创建一个堆 H[0……n-1]； 把堆首（最大值）和堆尾互换； 把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置； 重复步骤 2，直到堆的尺寸为 1。  动图演示#代码实现#public class HeapSort implements IArraySort { @Override public int[] sort(int[] arr) throws Exception { int len = arr.length; buildMaxHeap(arr, len); for (int i = len - 1; i &amp;gt; 0; i--) { swap(arr, 0, i); len--; heapify(arr, 0, len); } return arr; } private void buildMaxHeap(int[] arr, int len) { for (int i = (int) Math.</description>
    </item>
    
    <item>
      <title>适配器模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/structural/11-adapter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/structural/11-adapter/</guid>
      <description>适配器模式#概述# 英文：Adapter Pattern 简述：将原来不兼容的两个类匹配在一起 归纳：万能充电器 目的：兼容转换 案例：电源适配  示例#// 源 public class Adaptee { public void adapteeMethod() { System.out.println(&amp;#34;Adaptee method!&amp;#34;); } } // 目标 public interface Target { void adapteeMethod(); void adapterMethod(); } // 适配器 public class Adapter implements Target { private Adaptee adaptee; public Adapter(Adaptee adaptee) { this.adaptee = adaptee; } @Override public void adapteeMethod() { adaptee.adapteeMethod(); } @Override public void adapterMethod() { System.</description>
    </item>
    
    <item>
      <title>装饰器模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/structural/12-decorator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/structural/12-decorator/</guid>
      <description>装饰器模式#概述# 英文：Decorator Pattern 简述：不改变原类结构、不使用继承的情况下，动态地给一个对象添加一些额外的职责。 归纳：他大舅他二舅都是他舅 目的：灵活扩展、同宗同源 案例：煎饼  示例#// 被装饰类 public interface Shape { void draw(); } // 类似形状：Circle public class Rectangle implements Shape { @Override public void draw() { System.out.println(&amp;#34;Shape: 正方形&amp;#34;); } } // 装饰类 public abstract class ShapeDecorator implements Shape { protected Shape shape; public ShapeDecorator(Shape shape) { this.shape = shape; } @Override public void draw() { shape.draw(); } } // 类似装饰类:GreenShapeDecorator public class RedShapeDecorator extends ShapeDecorator { public RedShapeDecorator(Shape shape) { super(shape); } @Override public void draw() { super.</description>
    </item>
    
    <item>
      <title>状态模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/13-state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/13-state/</guid>
      <description>状态模式#概述# 英文：State Pattern 简述：根据不同的状态做出不同的行为 归纳：状态驱动行为，行为决定状态 目的：状态驱动行为，行为决定状态 案例：订单状态跟踪  示例#// 状态类 public abstract class LiftState { // 定义一个环境角色  protected Context context; public void setContext(Context context) { this.context = context; } public abstract void open(); public abstract void close(); public abstract void run(); public abstract void stop(); } // 类似状态：ClosingState、RunningState、StoppingState public class OpeningState extends LiftState { @Override public void close() { super.context.setLiftState(Context.closingState); super.</description>
    </item>
    
    <item>
      <title>策略模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/14-strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/14-strategy/</guid>
      <description>策略模式#概述# 英文：Strategy Pattern 简述：封装不同的算法，算法之间能互相替换 归纳：条条大道通罗马，具体哪条你来定 目的：把选择权交给用户 案例：选择支付方式  示例#业务场景：获取多种数据库的元数据
// 策略类 public interface DatabaseMeta { void getColumns(); } // 类似策略类：PgsqlDatabaseMeta、OracleDatabaseMeta public class MysqlDatabaseMeta implements DatabaseMeta { @Override public void getColumns() { System.out.println(&amp;#34;Mysql column...&amp;#34;); } } // 环境类 public class Context { private DatabaseMeta meta; public Context(DatabaseMeta meta) { this.meta = meta; } public void getColumns() { meta.getColumns(); } } public class Test { public static void main(String[] args) { Context context; context = new Context(new MysqlDatabaseMeta()); context.</description>
    </item>
    
    <item>
      <title>模板模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/15-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/15-template/</guid>
      <description>模板模式#概述# 英文：Template Pattern 简述：定义一套流程模板，根据需要实现模板中的操作 归纳：流程全部标准化，需要微调请覆盖 目的：逻辑复用 案例：把大象装进冰箱  示例#// 模板类 public abstract class Game { abstract void initialize(); abstract void startPlay(); abstract void endPlay(); // 模板方法  public final void play() { init(); startPlay(); endPlay(); } } // 类似实例：Volleyball public class Football extends Game { @Override void init() { System.out.println(&amp;#34;Football：Initialized! Start playing.&amp;#34;); } @Override void startPlay() { System.out.println(&amp;#34;Football：Started. Enjoy the game!&amp;#34;); } @Override void endPlay() { System.</description>
    </item>
    
    <item>
      <title>命令模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/16-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/16-command/</guid>
      <description>命令模式#概述# 英文：Command Pattern 简述：将请求封装成命令，并记录下来，能够撤销与重做 归纳：运筹帷幄之中，决胜千里之外 目的：解耦请求和处理 案例：遥控器  示例#// 命令 public interface Command { void execute(); } // 开机命令ConcreteCommand public class CommandOn implements Command { private Tv myTv; public CommandOn(Tv tv) { myTv = tv; } public void execute() { myTv.turnOn(); } } // 关机命令ConcreteCommand public class CommandOff implements Command { private Tv myTv; public CommandOff(Tv tv) { myTv = tv; } public void execute() { myTv.</description>
    </item>
    
    <item>
      <title>迭代器模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/17-iterator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/17-iterator/</guid>
      <description>迭代器模式#概述# 英文：Iterator Pattern 简述：提供一种方法顺序访问一个聚合对象中的各个元素，而又无须暴露该对象的内部细节 归纳：流水线上坐一天，每个包裹扫一遍 目的：统一对集合的访问方式 案例：逐个检票进站  示例#// 抽象迭代器 public interface Iterator { public boolean hasNext(); public Object next(); } // 抽象聚合 public interface Container { public Iterator getIterator(); } // 具体聚合 public class NameRepository implements Container { public String[] names = {&amp;#34;Robert&amp;#34;, &amp;#34;John&amp;#34;, &amp;#34;Julie&amp;#34;, &amp;#34;Lora&amp;#34;}; @Override public Iterator getIterator() { return new NameIterator(); } // 具体迭代器  private class NameIterator implements Iterator { int index = 0; @Override public boolean hasNext() { return index &amp;lt; names.</description>
    </item>
    
    <item>
      <title>解释器模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/18-interpreter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/18-interpreter/</guid>
      <description>解释器模式#概述# 英文：Interpreter Pattern 简述：给定一个语言，定义它的语法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子 归纳：我想说”方言“，一切解释权都归我 目的：实现特定语法解析 案例：摩斯密码  示例#// 解释器 public interface Expression { public boolean interpret(String context); } // 解释器TerminalExpression public class TerminalExpression implements Expression { private String data; public TerminalExpression(String data) { this.data = data; } @Override public boolean interpret(String context) { return context.contains(data); } } // 解释器OrExpression public class OrExpression implements Expression { private Expression expr1; private Expression expr2; public OrExpression(Expression expr1, Expression expr2) { this.</description>
    </item>
    
    <item>
      <title>观察者模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/19-observer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/19-observer/</guid>
      <description>观察者模式#概述# 英文：Observer Pattern 简述：状态发生改变时通知观察者，一对多的关系 归纳：到点就通知我 目的：解耦观察者与被观察者 案例：闹钟  示例#// 目标 public class Subject { private int state; private List&amp;lt;Observer&amp;gt; observers = new ArrayList&amp;lt;&amp;gt;(); public int getState() { return state; } public void setState(int state) { this.state = state; notifyAllObservers(); } public void attach(Observer observer) { observers.add(observer); } public void notifyAllObservers() { for (Observer observer : observers) { observer.update(); } } } // 抽象观察者 public abstract class Observer { protected Subject subject; public abstract void update(); } // 观察者BinaryObserver public class BinaryObserver extends Observer{ public BinaryObserver(Subject subject){ this.</description>
    </item>
    
    <item>
      <title>访问者模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/20-visitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/20-visitor/</guid>
      <description>访问者模式#概述# 英文：Visitor Pattern 简述：稳定数据结构，定义新的操作行为 归纳：横看成岭侧成峰，远近高低各不同 目的：解耦数据结构和数据操作 案例：KPI考核  示例#// 被访问者：员工 public abstract class Staff { public String name; public int kpi; public Staff(String name) { this.name = name; kpi = new Random().nextInt(10); } // 核心方法，接受Visitor的访问  public abstract void accept(Visitor visitor); } // 工程师 public class Engineer extends Staff { public Engineer(String name) { super(name); } @Override public void accept(Visitor visitor) { visitor.</description>
    </item>
    
    <item>
      <title>中介者模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/21-mediator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/21-mediator/</guid>
      <description>中介者模式#概述# 英文：Mediator Pattern 简述：将对象之间的通信关联关系封装到一个中介类中单独处理，从而使其耦合松散 归纳：联系方式我给你，怎么搞定我不管 目的：统一管理网状资源 案例：朋友圈  示例#// 中介者 public class ChatRoom { public static void showMessage(User user, String message) { System.out.println(new Date().toString() + &amp;#34; [&amp;#34; + user.getName() + &amp;#34;] : &amp;#34; + message); } } // 用户 public class User { @Setter @Getter private String name; public User(String name) { this.name = name; } public void sendMessage(String message) { ChatRoom.</description>
    </item>
    
    <item>
      <title>备忘录模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/22-memento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/22-memento/</guid>
      <description>备忘录模式#概述# 英文：Memento Pattern 简述：保存对象的状态，在需要时进行恢复 归纳：失足不成千古恨，想重来时就重来 目的：备份、后悔机制 案例：草稿箱  示例#// 备忘录 public class Memento { private String state; public Memento(String state) { this.state = state; } public String getState() { return state; } } // 备忘录管理员 public class CareTaker { private List&amp;lt;Memento&amp;gt; mementoList = new ArrayList&amp;lt;Memento&amp;gt;(); public void add(Memento state) { mementoList.add(state); } public Memento get(int index) { return mementoList.get(index); } } // 发起人 public class Originator { private String state; public void setState(String state) { this.</description>
    </item>
    
    <item>
      <title>职责链模式</title>
      <link>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/23-chainOfResponsibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiandar.github.io/docs/dev-design/design-pattern/behavioural/23-chainOfResponsibility/</guid>
      <description>职责链模式#概述# 英文：Chain of Responsibility Pattern 简述：  拦截的类都实现统一接口，每个接收者都包含对下一个接收者的引用。 将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。   归纳：各人自扫门前雪，莫管他们瓦上霜 目的：解耦处理逻辑 案例：踢皮球  示例#// 处理者 public abstract class Logger { public static int INFO = 1; public static int DEBUG = 2; public static int ERROR = 3; protected int level; //责任链中的下一个元素  protected Logger nextLogger; public void setNextLogger(Logger nextLogger) { this.nextLogger = nextLogger; } public void logMessage(int level, String message) { if (this.</description>
    </item>
    
  </channel>
</rss>
